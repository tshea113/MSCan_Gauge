// User configuerable variables
const int myCANid   = 10;     // CAN ID of this unit
const int msCANid   = 0;      // CAN ID of the Megasquirt (should almost always be 0)
const int REVLIMIT  = 6800;   // Soft rev limit at which to start blinking the tach gauge

#include <Metro.h>
#include <FlexCAN.h>
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Time.h>
#include <FastLED.h>
#include <Encoder.h>

// Pin definitions
#define LEDPIN      5   // Neopixel LED
#define RBUTTON_INT 15  //  
#define ENC_PIN_1   16  //  
#define ENC_PIN_2   17  // 
#define OLED_DC     10  // OLED Data/Command
#define OLED_CS     9   // OLED Chip Select
#define OLED_RESET  8   // OLED Reset
#define SPI_SCK     14  // SPI Clock
#define TEENSY_LED  13  // Onboard LED on the Teensy

// Constants
const int CAN_TIMEOUT                   = 1000;   // Display an error message if no CAN data during this interval
const int DISPLAY_REFRESH               = 100;    // Refresh the display at this interval
const int LED_FLASH_TIMER               = 1;      // How long to flash the led upon CAN frame receive/transmit
const int GAUGE_FLASH_TIMER             = 100;    // Blink the led ring pixels during certain conditions
const int NUM_LEDS                      = 16;     // Number of LEDs on the NeoPixel ring
const unsigned long DEBOUNCING_TIME     = 150;    // Debouncing Time - 150 is good, 200 is better, 250 seems worse
const int OLED_HEIGHT                   = 64;     // Height of the OLED screen in pixels
const int OLED_WIDTH                    = 128;    // Width of the OLED screen in pixels
const int CAN_BAUD                      = 500000; // CAN baud rate
const int MS_DATA_NAME_MAX_LENGTH       = 10;     // Maximum length of MS data field name
const int MS_DATA_BIN_NAME_MAX_LENGTH   = 14;     // Maximum length of MS data field name

// FastLED
CRGB leds[NUMLEDS];

// Encoder
Encoder myEnc(ENC_PIN_1, ENC_PIN_2);
volatile unsigned long last_millis;         //switch debouncing

// OLED Display Hardware SPI
Adafruit_SSD1306 display(OLED_DC, OLED_RESET, OLED_CS);

// TODO: Is this really needed?
#if (SSD1306_LCDHEIGHT != 64)
#error("Height incorrect, please fix Adafruit_SSD1306.h!");
#endif

// Metro ticks are milliseconds
Metro commTimer = Metro(CAN_TIMEOUT);
Metro displayTimer = Metro(DISPLAY_REFRESH);
Metro ledTimer = Metro(LED_FLASH_TIMER);
Metro gaugeBlinkTimer = Metro(GAUGE_FLASH_TIMER);
boolean connectionState = false;
boolean gaugeBlink = false;

int led = TEENSY_LED;
FlexCAN CANbus(CAN_BAUD);
static CAN_message_t txmsg,rxmsg;
static uint8_t hex[17] = "0123456789abcdef";

// TODO: Organize these better. Maybe in a struct?
//MS data vars
byte indicator[7]; // where to store indicator data
unsigned int RPM, CLT, MAP, MAT, SPKADV, BATTV, TPS, Knock, Baro, EGOc, IAC, dwell, bstduty, idle_tar;
int AFR, AFRtgt;
unsigned int MAP_HI, Knock_HI, RPM_HI, CLT_HI, MAT_HI;
int AFR_HI, AFR_LO;

struct ledval
{
  byte r0;
  byte g0;
  byte b0;
  byte r1;
  byte g1;
  byte b1;
  byte r2;
  byte g2;
  byte b2;
  byte r3;
  byte g3;
  byte b3;
};

const ledval ledarray[] PROGMEM =
{
  //r0, g0, b0, r1, g1, b1, r2, g2, b2, r3, g3, b3
  {0x0,0x5,0xFF,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, //0
  {0x0,0x6,0xFE,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, //1
  {0x0,0x7,0xFD,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, //2
  {0x0,0x8,0xFC,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, //3
  {0x0,0x9,0xFB,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, //4
  {0x0,0xA,0xFA,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, //5
  {0x0,0xB,0xF9,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, //6
  {0x0,0xC,0xF8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, //7
  {0x0,0xD,0xF7,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, //8
  {0x0,0xE,0xF6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, //9
  {0x0,0xF,0xF5,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, //10
  {0x0,0x10,0xF4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, //11
  {0x0,0x11,0xF3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, //12
  {0x0,0x12,0xF2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, //13
  {0x0,0x13,0xF1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, //14
  {0x0,0x14,0xF0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, //15
  {0x0,0x15,0xEF,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, //16
  {0x0,0x16,0xEE,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, //17
  {0x0,0x17,0xED,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, //18
  {0x0,0x18,0xEC,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, //19
  {0x0,0x19,0xEB,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, //20
  {0x0,0x1A,0xEA,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, //21
  {0x0,0x1B,0xE9,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, //22
  {0x0,0x1C,0xE8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, //23
  {0x0,0x1D,0xE7,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, //24
  {0x0,0x1E,0xE6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, //25
  {0x0,0x1F,0xE5,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, //26
  {0x0,0x20,0xE4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, //27
  {0x0,0x21,0xE3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, //28
  {0x0,0x22,0xE2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, //29
  {0x0,0x23,0xE1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, //30
  {0x0,0x24,0xE0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, //31
  {0x0,0x25,0xDF,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, //32
  {0x0,0x26,0xDE,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0}, //33
  {0x0,0x27,0xDD,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0}, //34
  {0x0,0x28,0xDC,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0}, //35
  {0x0,0x29,0xDB,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0}, //36
  {0x0,0x2A,0xDA,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0}, //37
  {0x0,0x2B,0xD9,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0}, //38
  {0x0,0x2C,0xD8,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0}, //39
  {0x0,0x2D,0xD7,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0}, //40
  {0x0,0x2E,0xD6,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0}, //41
  {0x0,0x2F,0xD5,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0}, //42
  {0x0,0x30,0xD4,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0}, //43
  {0x0,0x31,0xD3,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0}, //44
  {0x0,0x32,0xD2,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0}, //45
  {0x0,0x33,0xD1,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0}, //46
  {0x0,0x34,0xD0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0}, //47
  {0x0,0x35,0xCF,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0}, //48
  {0x0,0x36,0xCE,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0}, //49
  {0x0,0x37,0xCD,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0}, //50
  {0x0,0x38,0xCC,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0}, //51
  {0x0,0x39,0xCB,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0}, //52
  {0x0,0x3A,0xCA,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0}, //53
  {0x0,0x3B,0xC9,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0}, //54
  {0x0,0x3C,0xC8,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0}, //55
  {0x0,0x3D,0xC7,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0}, //56
  {0x0,0x3E,0xC6,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0}, //57
  {0x0,0x3F,0xC5,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0}, //58
  {0x0,0x40,0xC4,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0}, //59
  {0x0,0x41,0xC3,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0}, //60
  {0x0,0x42,0xC2,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0}, //61
  {0x0,0x43,0xC1,0x0,0x1,0x2,0x0,0x0,0x0,0x0,0x0,0x0}, //62
  {0x0,0x44,0xC0,0x0,0x1,0x3,0x0,0x0,0x0,0x0,0x0,0x0}, //63
  {0x0,0x45,0xBF,0x0,0x1,0x3,0x0,0x0,0x0,0x0,0x0,0x0}, //64
  {0x0,0x46,0xBE,0x0,0x1,0x3,0x0,0x0,0x0,0x0,0x0,0x0}, //65
  {0x0,0x47,0xBD,0x0,0x1,0x3,0x0,0x0,0x0,0x0,0x0,0x0}, //66
  {0x0,0x48,0xBC,0x0,0x1,0x3,0x0,0x0,0x0,0x0,0x0,0x0}, //67
  {0x0,0x49,0xBB,0x0,0x1,0x3,0x0,0x0,0x0,0x0,0x0,0x0}, //68
  {0x0,0x4A,0xBA,0x0,0x1,0x3,0x0,0x0,0x0,0x0,0x0,0x0}, //69
  {0x0,0x4B,0xB9,0x0,0x1,0x3,0x0,0x0,0x0,0x0,0x0,0x0}, //70
  {0x0,0x4C,0xB8,0x0,0x1,0x3,0x0,0x0,0x0,0x0,0x0,0x0}, //71
  {0x0,0x4D,0xB7,0x0,0x1,0x3,0x0,0x0,0x0,0x0,0x0,0x0}, //72
  {0x0,0x4E,0xB6,0x0,0x1,0x3,0x0,0x0,0x0,0x0,0x0,0x0}, //73
  {0x0,0x4F,0xB5,0x0,0x1,0x3,0x0,0x0,0x0,0x0,0x0,0x0}, //74
  {0x0,0x50,0xB4,0x0,0x1,0x4,0x0,0x0,0x0,0x0,0x0,0x0}, //75
  {0x0,0x51,0xB3,0x0,0x1,0x4,0x0,0x0,0x0,0x0,0x0,0x0}, //76
  {0x0,0x52,0xB2,0x0,0x1,0x4,0x0,0x0,0x0,0x0,0x0,0x0}, //77
  {0x0,0x53,0xB1,0x0,0x2,0x4,0x0,0x0,0x0,0x0,0x0,0x0}, //78
  {0x0,0x54,0xB0,0x0,0x2,0x4,0x0,0x0,0x0,0x0,0x0,0x0}, //79
  {0x0,0x55,0xAF,0x0,0x2,0x4,0x0,0x0,0x0,0x0,0x0,0x0}, //80
  {0x0,0x56,0xAE,0x0,0x2,0x4,0x0,0x0,0x0,0x0,0x0,0x0}, //81
  {0x0,0x57,0xAD,0x0,0x2,0x4,0x0,0x0,0x0,0x0,0x0,0x0}, //82
  {0x0,0x58,0xAC,0x0,0x2,0x4,0x0,0x0,0x0,0x0,0x0,0x0}, //83
  {0x0,0x59,0xAB,0x0,0x2,0x4,0x0,0x0,0x0,0x0,0x0,0x0}, //84
  {0x0,0x5A,0xAA,0x0,0x2,0x4,0x0,0x0,0x0,0x0,0x0,0x0}, //85
  {0x0,0x5B,0xA9,0x0,0x2,0x4,0x0,0x0,0x0,0x0,0x0,0x0}, //86
  {0x0,0x5C,0xA8,0x0,0x2,0x5,0x0,0x0,0x0,0x0,0x0,0x0}, //87
  {0x0,0x5D,0xA7,0x0,0x2,0x5,0x0,0x0,0x0,0x0,0x0,0x0}, //88
  {0x0,0x5E,0xA6,0x0,0x2,0x5,0x0,0x0,0x0,0x0,0x0,0x0}, //89
  {0x0,0x5F,0xA5,0x0,0x3,0x5,0x0,0x0,0x0,0x0,0x0,0x0}, //90
  {0x0,0x60,0xA4,0x0,0x3,0x5,0x0,0x0,0x0,0x0,0x0,0x0}, //91
  {0x0,0x61,0xA3,0x0,0x3,0x5,0x0,0x0,0x0,0x0,0x0,0x0}, //92
  {0x0,0x62,0xA2,0x0,0x3,0x5,0x0,0x0,0x0,0x0,0x0,0x0}, //93
  {0x0,0x63,0xA1,0x0,0x3,0x5,0x0,0x0,0x0,0x0,0x0,0x0}, //94
  {0x0,0x64,0xA0,0x0,0x3,0x5,0x0,0x0,0x0,0x0,0x0,0x0}, //95
  {0x0,0x65,0x9F,0x0,0x3,0x5,0x0,0x0,0x0,0x0,0x0,0x0}, //96
  {0x0,0x66,0x9E,0x0,0x3,0x5,0x0,0x0,0x0,0x0,0x0,0x0}, //97
  {0x0,0x67,0x9D,0x0,0x3,0x6,0x0,0x0,0x0,0x0,0x0,0x0}, //98
  {0x0,0x68,0x9C,0x0,0x4,0x6,0x0,0x0,0x0,0x0,0x0,0x0}, //99
  {0x0,0x69,0x9B,0x0,0x4,0x6,0x0,0x0,0x0,0x0,0x0,0x0}, //100
  {0x0,0x6A,0x9A,0x0,0x4,0x6,0x0,0x0,0x0,0x0,0x0,0x0}, //101
  {0x0,0x6B,0x99,0x0,0x4,0x6,0x0,0x0,0x0,0x0,0x0,0x0}, //102
  {0x0,0x6C,0x98,0x0,0x4,0x6,0x0,0x0,0x0,0x0,0x0,0x0}, //103
  {0x0,0x6D,0x97,0x0,0x4,0x6,0x0,0x0,0x0,0x0,0x0,0x0}, //104
  {0x0,0x6E,0x96,0x0,0x4,0x6,0x0,0x0,0x0,0x0,0x0,0x0}, //105
  {0x0,0x6F,0x95,0x0,0x4,0x6,0x0,0x0,0x0,0x0,0x0,0x0}, //106
  {0x0,0x70,0x94,0x0,0x5,0x6,0x0,0x0,0x0,0x0,0x0,0x0}, //107
  {0x0,0x71,0x93,0x0,0x5,0x6,0x0,0x0,0x0,0x0,0x0,0x0}, //108
  {0x0,0x72,0x92,0x0,0x5,0x6,0x0,0x0,0x0,0x0,0x0,0x0}, //109
  {0x0,0x73,0x91,0x0,0x5,0x7,0x0,0x0,0x0,0x0,0x0,0x0}, //110
  {0x0,0x74,0x90,0x0,0x5,0x7,0x0,0x0,0x0,0x0,0x0,0x0}, //111
  {0x0,0x75,0x8F,0x0,0x5,0x7,0x0,0x0,0x0,0x0,0x0,0x0}, //112
  {0x0,0x76,0x8E,0x0,0x6,0x7,0x0,0x0,0x0,0x0,0x0,0x0}, //113
  {0x0,0x77,0x8D,0x0,0x6,0x7,0x0,0x0,0x0,0x0,0x0,0x0}, //114
  {0x0,0x78,0x8C,0x0,0x6,0x7,0x0,0x0,0x0,0x0,0x0,0x0}, //115
  {0x0,0x79,0x8B,0x0,0x6,0x7,0x0,0x0,0x0,0x0,0x0,0x0}, //116
  {0x0,0x7A,0x8A,0x0,0x6,0x7,0x0,0x0,0x0,0x0,0x0,0x0}, //117
  {0x0,0x7B,0x89,0x0,0x6,0x7,0x0,0x0,0x0,0x0,0x0,0x0}, //118
  {0x0,0x7C,0x88,0x0,0x7,0x7,0x0,0x0,0x0,0x0,0x0,0x0}, //119
  {0x0,0x7D,0x87,0x0,0x7,0x7,0x0,0x0,0x0,0x0,0x0,0x0}, //120
  {0x0,0x7E,0x86,0x0,0x7,0x7,0x0,0x0,0x0,0x0,0x0,0x0}, //121
  {0x0,0x7F,0x85,0x0,0x7,0x7,0x0,0x0,0x0,0x0,0x0,0x0}, //122
  {0x0,0x80,0x84,0x0,0x7,0x7,0x0,0x0,0x0,0x0,0x0,0x0}, //123
  {0x0,0x81,0x83,0x0,0x7,0x8,0x0,0x0,0x0,0x0,0x0,0x0}, //124
  {0x0,0x82,0x82,0x0,0x8,0x8,0x0,0x0,0x0,0x0,0x0,0x0}, //125
  {0x0,0x83,0x81,0x0,0x8,0x8,0x0,0x0,0x0,0x0,0x0,0x0}, //126
  {0x0,0x84,0x80,0x0,0x8,0x8,0x0,0x0,0x0,0x0,0x0,0x0}, //127
  {0x0,0x85,0x7F,0x0,0x8,0x8,0x0,0x0,0x0,0x0,0x0,0x0}, //128
  {0x0,0x86,0x7E,0x0,0x8,0x8,0x0,0x0,0x0,0x0,0x0,0x0}, //129
  {0x0,0x87,0x7D,0x0,0x9,0x8,0x0,0x0,0x0,0x0,0x0,0x0}, //130
  {0x0,0x88,0x7C,0x0,0x9,0x8,0x0,0x0,0x0,0x0,0x0,0x0}, //131
  {0x0,0x89,0x7B,0x0,0x9,0x8,0x0,0x0,0x0,0x0,0x0,0x0}, //132
  {0x0,0x8A,0x7A,0x0,0x9,0x8,0x0,0x0,0x0,0x0,0x0,0x0}, //133
  {0x0,0x8B,0x79,0x0,0x9,0x8,0x0,0x0,0x0,0x0,0x0,0x0}, //134
  {0x0,0x8C,0x78,0x0,0xA,0x8,0x0,0x0,0x0,0x0,0x0,0x0}, //135
  {0x0,0x8D,0x77,0x0,0xA,0x8,0x0,0x0,0x0,0x0,0x0,0x0}, //136
  {0x0,0x8E,0x76,0x0,0xA,0x8,0x0,0x0,0x0,0x0,0x0,0x0}, //137
  {0x0,0x8F,0x75,0x0,0xA,0x8,0x0,0x0,0x0,0x0,0x0,0x0}, //138
  {0x0,0x90,0x74,0x0,0xB,0x8,0x0,0x0,0x0,0x0,0x0,0x0}, //139
  {0x0,0x91,0x73,0x0,0xB,0x9,0x0,0x0,0x0,0x0,0x0,0x0}, //140
  {0x0,0x92,0x72,0x0,0xB,0x9,0x0,0x0,0x0,0x0,0x0,0x0}, //141
  {0x0,0x93,0x71,0x0,0xB,0x9,0x0,0x0,0x0,0x0,0x0,0x0}, //142
  {0x0,0x94,0x70,0x0,0xC,0x9,0x0,0x0,0x0,0x0,0x0,0x0}, //143
  {0x0,0x95,0x6F,0x0,0xC,0x9,0x0,0x1,0x0,0x0,0x0,0x0}, //144
  {0x0,0x96,0x6E,0x0,0xC,0x9,0x0,0x1,0x0,0x0,0x0,0x0}, //145
  {0x0,0x97,0x6D,0x0,0xC,0x9,0x0,0x1,0x0,0x0,0x0,0x0}, //146
  {0x0,0x98,0x6C,0x0,0xD,0x9,0x0,0x1,0x0,0x0,0x0,0x0}, //147
  {0x0,0x99,0x6B,0x0,0xD,0x9,0x0,0x1,0x0,0x0,0x0,0x0}, //148
  {0x0,0x9A,0x6A,0x0,0xD,0x9,0x0,0x1,0x0,0x0,0x0,0x0}, //149
  {0x0,0x9B,0x69,0x0,0xD,0x9,0x0,0x1,0x0,0x0,0x0,0x0}, //150
  {0x0,0x9C,0x68,0x0,0xE,0x9,0x0,0x1,0x0,0x0,0x0,0x0}, //151
  {0x0,0x9D,0x67,0x0,0xE,0x9,0x0,0x1,0x0,0x0,0x0,0x0}, //152
  {0x0,0x9E,0x66,0x0,0xE,0x9,0x0,0x1,0x0,0x0,0x0,0x0}, //153
  {0x0,0x9F,0x65,0x0,0xF,0x9,0x0,0x1,0x0,0x0,0x0,0x0}, //154
  {0x0,0xA0,0x64,0x0,0xF,0x9,0x0,0x1,0x0,0x0,0x0,0x0}, //155
  {0x0,0xA1,0x63,0x0,0xF,0x9,0x0,0x1,0x0,0x0,0x0,0x0}, //156
  {0x0,0xA2,0x62,0x0,0xF,0x9,0x0,0x1,0x0,0x0,0x0,0x0}, //157
  {0x0,0xA3,0x61,0x0,0x10,0x9,0x0,0x1,0x0,0x0,0x0,0x0}, //158
  {0x0,0xA4,0x60,0x0,0x10,0x9,0x0,0x1,0x0,0x0,0x0,0x0}, //159
  {0x0,0xA5,0x5F,0x0,0x10,0x9,0x0,0x1,0x0,0x0,0x0,0x0}, //160
  {0x0,0xA6,0x5E,0x0,0x11,0x9,0x0,0x1,0x1,0x0,0x0,0x0}, //161
  {0x0,0xA7,0x5D,0x0,0x11,0x9,0x0,0x1,0x1,0x0,0x0,0x0}, //162
  {0x0,0xA8,0x5C,0x0,0x11,0x9,0x0,0x1,0x1,0x0,0x0,0x0}, //163
  {0x0,0xA9,0x5B,0x0,0x12,0x9,0x0,0x1,0x1,0x0,0x0,0x0}, //164
  {0x0,0xAA,0x5A,0x0,0x12,0x9,0x0,0x2,0x1,0x0,0x0,0x0}, //165
  {0x0,0xAB,0x59,0x0,0x12,0x9,0x0,0x2,0x1,0x0,0x0,0x0}, //166
  {0x0,0xAC,0x58,0x0,0x13,0x9,0x0,0x2,0x1,0x0,0x0,0x0}, //167
  {0x0,0xAD,0x57,0x0,0x13,0x9,0x0,0x2,0x1,0x0,0x0,0x0}, //168
  {0x0,0xAE,0x56,0x0,0x13,0x9,0x0,0x2,0x1,0x0,0x0,0x0}, //169
  {0x0,0xAF,0x55,0x0,0x14,0x9,0x0,0x2,0x1,0x0,0x0,0x0}, //170
  {0x0,0xB0,0x54,0x0,0x14,0x9,0x0,0x2,0x1,0x0,0x0,0x0}, //171
  {0x0,0xB1,0x53,0x0,0x14,0x9,0x0,0x2,0x1,0x0,0x0,0x0}, //172
  {0x0,0xB2,0x52,0x0,0x15,0x9,0x0,0x2,0x1,0x0,0x0,0x0}, //173
  {0x0,0xB3,0x51,0x0,0x15,0x9,0x0,0x2,0x1,0x0,0x0,0x0}, //174
  {0x0,0xB4,0x50,0x0,0x16,0x9,0x0,0x2,0x1,0x0,0x0,0x0}, //175
  {0x0,0xB5,0x4F,0x0,0x16,0x9,0x0,0x2,0x1,0x0,0x0,0x0}, //176
  {0x0,0xB6,0x4E,0x0,0x16,0x9,0x0,0x2,0x1,0x0,0x0,0x0}, //177
  {0x0,0xB7,0x4D,0x0,0x17,0x9,0x0,0x2,0x1,0x0,0x0,0x0}, //178
  {0x0,0xB8,0x4C,0x0,0x17,0x9,0x0,0x3,0x1,0x0,0x0,0x0}, //179
  {0x0,0xB9,0x4B,0x0,0x17,0x9,0x0,0x3,0x1,0x0,0x0,0x0}, //180
  {0x0,0xBA,0x4A,0x0,0x18,0x9,0x0,0x3,0x1,0x0,0x0,0x0}, //181
  {0x0,0xBB,0x49,0x0,0x18,0x9,0x0,0x3,0x1,0x0,0x0,0x0}, //182
  {0x0,0xBC,0x48,0x0,0x19,0x9,0x0,0x3,0x1,0x0,0x0,0x0}, //183
  {0x0,0xBD,0x47,0x0,0x19,0x9,0x0,0x3,0x1,0x0,0x0,0x0}, //184
  {0x0,0xBE,0x46,0x0,0x1A,0x9,0x0,0x3,0x1,0x0,0x0,0x0}, //185
  {0x0,0xBF,0x45,0x0,0x1A,0x9,0x0,0x3,0x1,0x0,0x0,0x0}, //186
  {0x0,0xC0,0x44,0x0,0x1A,0x9,0x0,0x3,0x1,0x0,0x0,0x0}, //187
  {0x0,0xC1,0x43,0x0,0x1B,0x9,0x0,0x3,0x1,0x0,0x0,0x0}, //188
  {0x0,0xC2,0x42,0x0,0x1B,0x9,0x0,0x3,0x1,0x0,0x0,0x0}, //189
  {0x0,0xC3,0x41,0x0,0x1C,0x9,0x0,0x4,0x1,0x0,0x0,0x0}, //190
  {0x0,0xC4,0x40,0x0,0x1C,0x9,0x0,0x4,0x1,0x0,0x0,0x0}, //191
  {0x0,0xC5,0x3F,0x0,0x1D,0x9,0x0,0x4,0x1,0x0,0x0,0x0}, //192
  {0x0,0xC6,0x3E,0x0,0x1D,0x9,0x0,0x4,0x1,0x0,0x0,0x0}, //193
  {0x0,0xC7,0x3D,0x0,0x1D,0x9,0x0,0x4,0x1,0x0,0x0,0x0}, //194
  {0x0,0xC8,0x3C,0x0,0x1E,0x9,0x0,0x4,0x1,0x0,0x0,0x0}, //195
  {0x0,0xC9,0x3B,0x0,0x1E,0x9,0x0,0x4,0x1,0x0,0x0,0x0}, //196
  {0x0,0xCA,0x3A,0x0,0x1F,0x9,0x0,0x4,0x1,0x0,0x0,0x0}, //197
  {0x0,0xCB,0x39,0x0,0x1F,0x8,0x0,0x4,0x1,0x0,0x0,0x0}, //198
  {0x0,0xCC,0x38,0x0,0x20,0x8,0x0,0x5,0x1,0x0,0x0,0x0}, //199
  {0x0,0xCD,0x37,0x0,0x20,0x8,0x0,0x5,0x1,0x0,0x0,0x0}, //200
  {0x0,0xCE,0x36,0x0,0x21,0x8,0x0,0x5,0x1,0x0,0x0,0x0}, //201
  {0x0,0xCF,0x35,0x0,0x21,0x8,0x0,0x5,0x1,0x0,0x0,0x0}, //202
  {0x0,0xD0,0x34,0x0,0x22,0x8,0x0,0x5,0x1,0x0,0x0,0x0}, //203
  {0x0,0xD1,0x33,0x0,0x22,0x8,0x0,0x5,0x1,0x0,0x0,0x0}, //204
  {0x0,0xD2,0x32,0x0,0x23,0x8,0x0,0x5,0x1,0x0,0x0,0x0}, //205
  {0x0,0xD3,0x31,0x0,0x23,0x8,0x0,0x6,0x1,0x0,0x0,0x0}, //206
  {0x0,0xD4,0x30,0x0,0x24,0x8,0x0,0x6,0x1,0x0,0x0,0x0}, //207
  {0x0,0xD5,0x2F,0x0,0x24,0x8,0x0,0x6,0x1,0x0,0x0,0x0}, //208
  {0x0,0xD6,0x2E,0x0,0x25,0x8,0x0,0x6,0x1,0x0,0x0,0x0}, //209
  {0x0,0xD7,0x2D,0x0,0x25,0x7,0x0,0x6,0x1,0x0,0x0,0x0}, //210
  {0x0,0xD8,0x2C,0x0,0x26,0x7,0x0,0x6,0x1,0x0,0x0,0x0}, //211
  {0x0,0xD9,0x2B,0x0,0x27,0x7,0x0,0x7,0x1,0x0,0x0,0x0}, //212
  {0x0,0xDA,0x2A,0x0,0x27,0x7,0x0,0x7,0x1,0x0,0x0,0x0}, //213
  {0x0,0xDB,0x29,0x0,0x28,0x7,0x0,0x7,0x1,0x0,0x0,0x0}, //214
  {0x0,0xDC,0x28,0x0,0x28,0x7,0x0,0x7,0x1,0x0,0x0,0x0}, //215
  {0x0,0xDD,0x27,0x0,0x29,0x7,0x0,0x7,0x1,0x0,0x0,0x0}, //216
  {0x0,0xDE,0x26,0x0,0x29,0x7,0x0,0x7,0x1,0x0,0x0,0x0}, //217
  {0x0,0xDF,0x25,0x0,0x2A,0x7,0x0,0x8,0x1,0x0,0x0,0x0}, //218
  {0x0,0xE0,0x24,0x0,0x2A,0x6,0x0,0x8,0x1,0x0,0x0,0x0}, //219
  {0x0,0xE1,0x23,0x0,0x2B,0x6,0x0,0x8,0x1,0x0,0x0,0x0}, //220
  {0x0,0xE2,0x22,0x0,0x2C,0x6,0x0,0x8,0x1,0x0,0x0,0x0}, //221
  {0x0,0xE3,0x21,0x0,0x2C,0x6,0x0,0x8,0x1,0x0,0x0,0x0}, //222
  {0x0,0xE4,0x20,0x0,0x2D,0x6,0x0,0x9,0x1,0x0,0x0,0x0}, //223
  {0x0,0xE5,0x1F,0x0,0x2D,0x6,0x0,0x9,0x1,0x0,0x0,0x0}, //224
  {0x0,0xE6,0x1E,0x0,0x2E,0x6,0x0,0x9,0x1,0x0,0x0,0x0}, //225
  {0x0,0xE7,0x1D,0x0,0x2F,0x5,0x0,0x9,0x1,0x0,0x0,0x0}, //226
  {0x0,0xE8,0x1C,0x0,0x2F,0x5,0x0,0x9,0x1,0x0,0x0,0x0}, //227
  {0x0,0xE9,0x1B,0x0,0x30,0x5,0x0,0xA,0x1,0x0,0x0,0x0}, //228
  {0x0,0xEA,0x1A,0x0,0x31,0x5,0x0,0xA,0x1,0x0,0x0,0x0}, //229
  {0x0,0xEB,0x19,0x0,0x31,0x5,0x0,0xA,0x1,0x0,0x0,0x0}, //230
  {0x0,0xEC,0x18,0x0,0x32,0x5,0x0,0xA,0x1,0x0,0x0,0x0}, //231
  {0x0,0xED,0x17,0x0,0x33,0x4,0x0,0xA,0x1,0x0,0x0,0x0}, //232
  {0x0,0xEE,0x16,0x0,0x33,0x4,0x0,0xB,0x1,0x0,0x0,0x0}, //233
  {0x0,0xEF,0x15,0x0,0x34,0x4,0x0,0xB,0x1,0x0,0x0,0x0}, //234
  {0x0,0xF0,0x14,0x0,0x35,0x4,0x0,0xB,0x0,0x0,0x0,0x0}, //235
  {0x0,0xF1,0x13,0x0,0x35,0x4,0x0,0xB,0x0,0x0,0x0,0x0}, //236
  {0x0,0xF2,0x12,0x0,0x36,0x4,0x0,0xC,0x0,0x0,0x0,0x0}, //237
  {0x0,0xF3,0x11,0x0,0x37,0x3,0x0,0xC,0x0,0x0,0x0,0x0}, //238
  {0x0,0xF4,0x10,0x0,0x37,0x3,0x0,0xC,0x0,0x0,0x0,0x0}, //239
  {0x0,0xF5,0xF,0x0,0x38,0x3,0x0,0xD,0x0,0x0,0x0,0x0}, //240
  {0x0,0xF6,0xE,0x0,0x39,0x3,0x0,0xD,0x0,0x0,0x0,0x0}, //241
  {0x0,0xF7,0xD,0x0,0x39,0x3,0x0,0xD,0x0,0x0,0x0,0x0}, //242
  {0x0,0xF8,0xC,0x0,0x3A,0x2,0x0,0xD,0x0,0x0,0x0,0x0}, //243
  {0x0,0xF9,0xB,0x0,0x3B,0x2,0x0,0xE,0x0,0x0,0x0,0x0}, //244
  {0x0,0xFA,0xA,0x0,0x3C,0x2,0x0,0xE,0x0,0x0,0x0,0x0}, //245
  {0x1,0xFB,0x9,0x0,0x3C,0x2,0x0,0xE,0x0,0x0,0x0,0x0}, //246
  {0x2,0xFC,0x8,0x0,0x3D,0x1,0x0,0xF,0x0,0x0,0x0,0x0}, //247
  {0x3,0xFD,0x7,0x0,0x3E,0x1,0x0,0xF,0x0,0x0,0x0,0x0}, //248
  {0x4,0xFE,0x6,0x0,0x3E,0x1,0x0,0xF,0x0,0x0,0x0,0x0}, //249
  {0x5,0xFF,0x5,0x1,0x3F,0x1,0x0,0xF,0x0,0x0,0x0,0x0}, //250
  {0x6,0xFE,0x4,0x1,0x40,0x1,0x0,0x10,0x0,0x0,0x1,0x0}, //251
  {0x7,0xFD,0x3,0x1,0x40,0x0,0x0,0x10,0x0,0x0,0x1,0x0}, //252
  {0x8,0xFC,0x2,0x2,0x40,0x0,0x0,0x10,0x0,0x0,0x1,0x0}, //253
  {0x9,0xFB,0x1,0x2,0x40,0x0,0x0,0x10,0x0,0x0,0x1,0x0}, //254
  {0xA,0xFA,0x0,0x2,0x41,0x0,0x0,0x10,0x0,0x0,0x1,0x0}, //255
  {0xB,0xF9,0x0,0x2,0x41,0x0,0x0,0x11,0x0,0x0,0x1,0x0}, //256
  {0xC,0xF8,0x0,0x3,0x41,0x0,0x0,0x11,0x0,0x0,0x1,0x0}, //257
  {0xD,0xF7,0x0,0x3,0x41,0x0,0x0,0x11,0x0,0x0,0x1,0x0}, //258
  {0xE,0xF6,0x0,0x3,0x42,0x0,0x1,0x11,0x0,0x0,0x1,0x0}, //259
  {0xF,0xF5,0x0,0x4,0x42,0x0,0x1,0x11,0x0,0x0,0x1,0x0}, //260
  {0x10,0xF4,0x0,0x4,0x42,0x0,0x1,0x12,0x0,0x0,0x1,0x0}, //261
  {0x11,0xF3,0x0,0x4,0x42,0x0,0x1,0x12,0x0,0x0,0x1,0x0}, //262
  {0x12,0xF2,0x0,0x4,0x42,0x0,0x1,0x12,0x0,0x0,0x1,0x0}, //263
  {0x13,0xF1,0x0,0x5,0x43,0x0,0x1,0x12,0x0,0x0,0x1,0x0}, //264
  {0x14,0xF0,0x0,0x5,0x43,0x0,0x1,0x12,0x0,0x0,0x1,0x0}, //265
  {0x15,0xEF,0x0,0x5,0x43,0x0,0x1,0x13,0x0,0x0,0x1,0x0}, //266
  {0x16,0xEE,0x0,0x6,0x43,0x0,0x1,0x13,0x0,0x0,0x1,0x0}, //267
  {0x17,0xED,0x0,0x6,0x44,0x0,0x1,0x13,0x0,0x0,0x1,0x0}, //268
  {0x18,0xEC,0x0,0x6,0x44,0x0,0x2,0x13,0x0,0x0,0x1,0x0}, //269
  {0x19,0xEB,0x0,0x7,0x44,0x0,0x2,0x13,0x0,0x0,0x1,0x0}, //270
  {0x1A,0xEA,0x0,0x7,0x44,0x0,0x2,0x14,0x0,0x0,0x1,0x0}, //271
  {0x1B,0xE9,0x0,0x7,0x44,0x0,0x2,0x14,0x0,0x0,0x1,0x0}, //272
  {0x1C,0xE8,0x0,0x8,0x45,0x0,0x2,0x14,0x0,0x0,0x1,0x0}, //273
  {0x1D,0xE7,0x0,0x8,0x45,0x0,0x2,0x14,0x0,0x0,0x1,0x0}, //274
  {0x1E,0xE6,0x0,0x9,0x45,0x0,0x2,0x15,0x0,0x0,0x1,0x0}, //275
  {0x1F,0xE5,0x0,0x9,0x45,0x0,0x2,0x15,0x0,0x0,0x1,0x0}, //276
  {0x20,0xE4,0x0,0x9,0x45,0x0,0x3,0x15,0x0,0x0,0x2,0x0}, //277
  {0x21,0xE3,0x0,0xA,0x46,0x0,0x3,0x15,0x0,0x0,0x2,0x0}, //278
  {0x22,0xE2,0x0,0xA,0x46,0x0,0x3,0x15,0x0,0x0,0x2,0x0}, //279
  {0x23,0xE1,0x0,0xA,0x46,0x0,0x3,0x16,0x0,0x0,0x2,0x0}, //280
  {0x24,0xE0,0x0,0xB,0x46,0x0,0x3,0x16,0x0,0x0,0x2,0x0}, //281
  {0x25,0xDF,0x0,0xB,0x46,0x0,0x3,0x16,0x0,0x0,0x2,0x0}, //282
  {0x26,0xDE,0x0,0xC,0x47,0x0,0x3,0x16,0x0,0x0,0x2,0x0}, //283
  {0x27,0xDD,0x0,0xC,0x47,0x0,0x4,0x17,0x0,0x0,0x2,0x0}, //284
  {0x28,0xDC,0x0,0xC,0x47,0x0,0x4,0x17,0x0,0x0,0x2,0x0}, //285
  {0x29,0xDB,0x0,0xD,0x47,0x0,0x4,0x17,0x0,0x0,0x2,0x0}, //286
  {0x2A,0xDA,0x0,0xD,0x47,0x0,0x4,0x17,0x0,0x0,0x2,0x0}, //287
  {0x2B,0xD9,0x0,0xE,0x47,0x0,0x4,0x17,0x0,0x0,0x2,0x0}, //288
  {0x2C,0xD8,0x0,0xE,0x48,0x0,0x4,0x18,0x0,0x0,0x2,0x0}, //289
  {0x2D,0xD7,0x0,0xF,0x48,0x0,0x5,0x18,0x0,0x0,0x2,0x0}, //290
  {0x2E,0xD6,0x0,0xF,0x48,0x0,0x5,0x18,0x0,0x0,0x2,0x0}, //291
  {0x2F,0xD5,0x0,0x10,0x48,0x0,0x5,0x18,0x0,0x0,0x2,0x0}, //292
  {0x30,0xD4,0x0,0x10,0x48,0x0,0x5,0x18,0x0,0x0,0x2,0x0}, //293
  {0x31,0xD3,0x0,0x10,0x48,0x0,0x5,0x19,0x0,0x0,0x3,0x0}, //294
  {0x32,0xD2,0x0,0x11,0x49,0x0,0x6,0x19,0x0,0x0,0x3,0x0}, //295
  {0x33,0xD1,0x0,0x11,0x49,0x0,0x6,0x19,0x0,0x0,0x3,0x0}, //296
  {0x34,0xD0,0x0,0x12,0x49,0x0,0x6,0x19,0x0,0x0,0x3,0x0}, //297
  {0x35,0xCF,0x0,0x12,0x49,0x0,0x6,0x1A,0x0,0x0,0x3,0x0}, //298
  {0x36,0xCE,0x0,0x13,0x49,0x0,0x6,0x1A,0x0,0x0,0x3,0x0}, //299
  {0x37,0xCD,0x0,0x13,0x49,0x0,0x7,0x1A,0x0,0x0,0x3,0x0}, //300
  {0x38,0xCC,0x0,0x14,0x49,0x0,0x7,0x1A,0x0,0x0,0x3,0x0}, //301
  {0x39,0xCB,0x0,0x14,0x4A,0x0,0x7,0x1B,0x0,0x1,0x3,0x0}, //302
  {0x3A,0xCA,0x0,0x15,0x4A,0x0,0x7,0x1B,0x0,0x1,0x3,0x0}, //303
  {0x3B,0xC9,0x0,0x15,0x4A,0x0,0x8,0x1B,0x0,0x1,0x3,0x0}, //304
  {0x3C,0xC8,0x0,0x16,0x4A,0x0,0x8,0x1B,0x0,0x1,0x3,0x0}, //305
  {0x3D,0xC7,0x0,0x16,0x4A,0x0,0x8,0x1B,0x0,0x1,0x3,0x0}, //306
  {0x3E,0xC6,0x0,0x17,0x4A,0x0,0x8,0x1C,0x0,0x1,0x3,0x0}, //307
  {0x3F,0xC5,0x0,0x17,0x4A,0x0,0x9,0x1C,0x0,0x1,0x4,0x0}, //308
  {0x40,0xC4,0x0,0x18,0x4A,0x0,0x9,0x1C,0x0,0x1,0x4,0x0}, //309
  {0x41,0xC3,0x0,0x18,0x4A,0x0,0x9,0x1C,0x0,0x1,0x4,0x0}, //310
  {0x42,0xC2,0x0,0x19,0x4B,0x0,0x9,0x1D,0x0,0x1,0x4,0x0}, //311
  {0x43,0xC1,0x0,0x1A,0x4B,0x0,0xA,0x1D,0x0,0x1,0x4,0x0}, //312
  {0x44,0xC0,0x0,0x1A,0x4B,0x0,0xA,0x1D,0x0,0x1,0x4,0x0}, //313
  {0x45,0xBF,0x0,0x1B,0x4B,0x0,0xA,0x1D,0x0,0x1,0x4,0x0}, //314
  {0x46,0xBE,0x0,0x1B,0x4B,0x0,0xB,0x1D,0x0,0x1,0x4,0x0}, //315
  {0x47,0xBD,0x0,0x1C,0x4B,0x0,0xB,0x1E,0x0,0x1,0x4,0x0}, //316
  {0x48,0xBC,0x0,0x1C,0x4B,0x0,0xB,0x1E,0x0,0x1,0x4,0x0}, //317
  {0x49,0xBB,0x0,0x1D,0x4B,0x0,0xB,0x1E,0x0,0x1,0x5,0x0}, //318
  {0x4A,0xBA,0x0,0x1E,0x4B,0x0,0xC,0x1E,0x0,0x2,0x5,0x0}, //319
  {0x4B,0xB9,0x0,0x1E,0x4B,0x0,0xC,0x1F,0x0,0x2,0x5,0x0}, //320
  {0x4C,0xB8,0x0,0x1F,0x4B,0x0,0xC,0x1F,0x0,0x2,0x5,0x0}, //321
  {0x4D,0xB7,0x0,0x1F,0x4B,0x0,0xD,0x1F,0x0,0x2,0x5,0x0}, //322
  {0x4E,0xB6,0x0,0x20,0x4B,0x0,0xD,0x1F,0x0,0x2,0x5,0x0}, //323
  {0x4F,0xB5,0x0,0x21,0x4C,0x0,0xD,0x1F,0x0,0x2,0x5,0x0}, //324
  {0x50,0xB4,0x0,0x21,0x4C,0x0,0xE,0x20,0x0,0x2,0x5,0x0}, //325
  {0x51,0xB3,0x0,0x22,0x4C,0x0,0xE,0x20,0x0,0x2,0x5,0x0}, //326
  {0x52,0xB2,0x0,0x23,0x4C,0x0,0xF,0x20,0x0,0x2,0x5,0x0}, //327
  {0x53,0xB1,0x0,0x23,0x4C,0x0,0xF,0x20,0x0,0x2,0x6,0x0}, //328
  {0x54,0xB0,0x0,0x24,0x4C,0x0,0xF,0x20,0x0,0x2,0x6,0x0}, //329
  {0x55,0xAF,0x0,0x25,0x4C,0x0,0x10,0x21,0x0,0x3,0x6,0x0}, //330
  {0x56,0xAE,0x0,0x25,0x4C,0x0,0x10,0x21,0x0,0x3,0x6,0x0}, //331
  {0x57,0xAD,0x0,0x26,0x4C,0x0,0x10,0x21,0x0,0x3,0x6,0x0}, //332
  {0x58,0xAC,0x0,0x27,0x4C,0x0,0x11,0x21,0x0,0x3,0x6,0x0}, //333
  {0x59,0xAB,0x0,0x27,0x4C,0x0,0x11,0x22,0x0,0x3,0x6,0x0}, //334
  {0x5A,0xAA,0x0,0x28,0x4C,0x0,0x12,0x22,0x0,0x3,0x6,0x0}, //335
  {0x5B,0xA9,0x0,0x29,0x4C,0x0,0x12,0x22,0x0,0x3,0x7,0x0}, //336
  {0x5C,0xA8,0x0,0x29,0x4C,0x0,0x12,0x22,0x0,0x3,0x7,0x0}, //337
  {0x5D,0xA7,0x0,0x2A,0x4C,0x0,0x13,0x22,0x0,0x4,0x7,0x0}, //338
  {0x5E,0xA6,0x0,0x2B,0x4C,0x0,0x13,0x23,0x0,0x4,0x7,0x0}, //339
  {0x5F,0xA5,0x0,0x2B,0x4C,0x0,0x14,0x23,0x0,0x4,0x7,0x0}, //340
  {0x60,0xA4,0x0,0x2C,0x4C,0x0,0x14,0x23,0x0,0x4,0x7,0x0}, //341
  {0x61,0xA3,0x0,0x2D,0x4C,0x0,0x15,0x23,0x0,0x4,0x7,0x0}, //342
  {0x62,0xA2,0x0,0x2E,0x4C,0x0,0x15,0x23,0x0,0x4,0x7,0x0}, //343
  {0x63,0xA1,0x0,0x2E,0x4C,0x0,0x16,0x24,0x0,0x4,0x8,0x0}, //344
  {0x64,0xA0,0x0,0x2F,0x4C,0x0,0x16,0x24,0x0,0x5,0x8,0x0}, //345
  {0x65,0x9F,0x0,0x30,0x4C,0x0,0x17,0x24,0x0,0x5,0x8,0x0}, //346
  {0x66,0x9E,0x0,0x31,0x4C,0x0,0x17,0x24,0x0,0x5,0x8,0x0}, //347
  {0x67,0x9D,0x0,0x31,0x4C,0x0,0x18,0x24,0x0,0x5,0x8,0x0}, //348
  {0x68,0x9C,0x0,0x32,0x4C,0x0,0x18,0x25,0x0,0x5,0x8,0x0}, //349
  {0x69,0x9B,0x0,0x33,0x4B,0x0,0x19,0x25,0x0,0x6,0x8,0x0}, //350
  {0x6A,0x9A,0x0,0x34,0x4B,0x0,0x19,0x25,0x0,0x6,0x9,0x0}, //351
  {0x6B,0x99,0x0,0x35,0x4B,0x0,0x1A,0x25,0x0,0x6,0x9,0x0}, //352
  {0x6C,0x98,0x0,0x35,0x4B,0x0,0x1A,0x25,0x0,0x6,0x9,0x0}, //353
  {0x6D,0x97,0x0,0x36,0x4B,0x0,0x1B,0x25,0x0,0x6,0x9,0x0}, //354
  {0x6E,0x96,0x0,0x37,0x4B,0x0,0x1B,0x26,0x0,0x7,0x9,0x0}, //355
  {0x6F,0x95,0x0,0x38,0x4B,0x0,0x1C,0x26,0x0,0x7,0x9,0x0}, //356
  {0x70,0x94,0x0,0x39,0x4B,0x0,0x1D,0x26,0x0,0x7,0x9,0x0}, //357
  {0x71,0x93,0x0,0x39,0x4B,0x0,0x1D,0x26,0x0,0x7,0xA,0x0}, //358
  {0x72,0x92,0x0,0x3A,0x4B,0x0,0x1E,0x26,0x0,0x8,0xA,0x0}, //359
  {0x73,0x91,0x0,0x3B,0x4B,0x0,0x1E,0x26,0x0,0x8,0xA,0x0}, //360
  {0x74,0x90,0x0,0x3C,0x4B,0x0,0x1F,0x27,0x0,0x8,0xA,0x0}, //361
  {0x75,0x8F,0x0,0x3D,0x4A,0x0,0x20,0x27,0x0,0x8,0xA,0x0}, //362
  {0x76,0x8E,0x0,0x3E,0x4A,0x0,0x20,0x27,0x0,0x9,0xA,0x0}, //363
  {0x77,0x8D,0x0,0x3F,0x4A,0x0,0x21,0x27,0x0,0x9,0xB,0x0}, //364
  {0x78,0x8C,0x0,0x3F,0x4A,0x0,0x22,0x27,0x0,0x9,0xB,0x0}, //365
  {0x79,0x8B,0x0,0x40,0x4A,0x0,0x22,0x27,0x0,0x9,0xB,0x0}, //366
  {0x7A,0x8A,0x0,0x41,0x4A,0x0,0x23,0x28,0x0,0xA,0xB,0x0}, //367
  {0x7B,0x89,0x0,0x42,0x4A,0x0,0x24,0x28,0x0,0xA,0xB,0x0}, //368
  {0x7C,0x88,0x0,0x43,0x4A,0x0,0x24,0x28,0x0,0xA,0xB,0x0}, //369
  {0x7D,0x87,0x0,0x44,0x49,0x0,0x25,0x28,0x0,0xB,0xC,0x0}, //370
  {0x7E,0x86,0x0,0x45,0x49,0x0,0x26,0x28,0x0,0xB,0xC,0x0}, //371
  {0x7F,0x85,0x0,0x46,0x49,0x0,0x26,0x28,0x0,0xB,0xC,0x0}, //372
  {0x80,0x84,0x0,0x47,0x49,0x0,0x27,0x28,0x0,0xC,0xC,0x0}, //373
  {0x81,0x83,0x0,0x48,0x49,0x0,0x28,0x29,0x0,0xC,0xC,0x0}, //374
  {0x82,0x82,0x0,0x49,0x49,0x0,0x29,0x29,0x0,0xD,0xD,0x0}, //375
  {0x83,0x81,0x0,0x4A,0x48,0x0,0x29,0x29,0x0,0xD,0xD,0x0}, //376
  {0x84,0x80,0x0,0x4B,0x48,0x0,0x2A,0x29,0x0,0xD,0xD,0x0}, //377
  {0x85,0x7F,0x0,0x4C,0x48,0x0,0x2B,0x29,0x0,0xE,0xD,0x0}, //378
  {0x86,0x7E,0x0,0x4C,0x48,0x0,0x2C,0x29,0x0,0xE,0xD,0x0}, //379
  {0x87,0x7D,0x0,0x4D,0x48,0x0,0x2D,0x29,0x0,0xF,0xD,0x0}, //380
  {0x88,0x7C,0x0,0x4E,0x47,0x0,0x2D,0x29,0x0,0xF,0xE,0x0}, //381
  {0x89,0x7B,0x0,0x4F,0x47,0x0,0x2E,0x29,0x0,0xF,0xE,0x0}, //382
  {0x8A,0x7A,0x0,0x50,0x47,0x0,0x2F,0x2A,0x0,0x10,0xE,0x0}, //383
  {0x8B,0x79,0x0,0x51,0x47,0x0,0x30,0x2A,0x0,0x10,0xE,0x0}, //384
  {0x8C,0x78,0x0,0x53,0x47,0x0,0x31,0x2A,0x0,0x11,0xE,0x0}, //385
  {0x8D,0x77,0x0,0x54,0x46,0x0,0x32,0x2A,0x0,0x11,0xF,0x0}, //386
  {0x8E,0x76,0x0,0x55,0x46,0x0,0x32,0x2A,0x0,0x12,0xF,0x0}, //387
  {0x8F,0x75,0x0,0x56,0x46,0x0,0x33,0x2A,0x0,0x12,0xF,0x0}, //388
  {0x90,0x74,0x0,0x57,0x46,0x0,0x34,0x2A,0x0,0x13,0xF,0x0}, //389
  {0x91,0x73,0x0,0x58,0x45,0x0,0x35,0x2A,0x0,0x13,0xF,0x0}, //390
  {0x92,0x72,0x0,0x59,0x45,0x0,0x36,0x2A,0x0,0x14,0xF,0x0}, //391
  {0x93,0x71,0x0,0x5A,0x45,0x0,0x37,0x2A,0x0,0x14,0x10,0x0}, //392
  {0x94,0x70,0x0,0x5B,0x45,0x0,0x38,0x2A,0x0,0x15,0x10,0x0}, //393
  {0x95,0x6F,0x0,0x5C,0x44,0x0,0x39,0x2A,0x0,0x16,0x10,0x0}, //394
  {0x96,0x6E,0x0,0x5D,0x44,0x0,0x3A,0x2A,0x0,0x16,0x10,0x0}, //395
  {0x97,0x6D,0x0,0x5E,0x44,0x0,0x3B,0x2A,0x0,0x17,0x10,0x0}, //396
  {0x98,0x6C,0x0,0x5F,0x44,0x0,0x3C,0x2A,0x0,0x18,0x11,0x0}, //397
  {0x99,0x6B,0x0,0x60,0x43,0x0,0x3D,0x2A,0x0,0x18,0x11,0x0}, //398
  {0x9A,0x6A,0x0,0x62,0x43,0x0,0x3E,0x2A,0x0,0x19,0x11,0x0}, //399
  {0x9B,0x69,0x0,0x63,0x43,0x0,0x3F,0x2B,0x0,0x1A,0x11,0x0}, //400
  {0x9C,0x68,0x0,0x64,0x42,0x0,0x40,0x2B,0x0,0x1A,0x11,0x0}, //401
  {0x9D,0x67,0x0,0x65,0x42,0x0,0x41,0x2B,0x0,0x1B,0x11,0x0}, //402
  {0x9E,0x66,0x0,0x66,0x42,0x0,0x42,0x2B,0x0,0x1C,0x12,0x0}, //403
  {0x9F,0x65,0x0,0x67,0x41,0x0,0x43,0x2B,0x0,0x1C,0x12,0x0}, //404
  {0xA0,0x64,0x0,0x68,0x41,0x0,0x44,0x2B,0x0,0x1D,0x12,0x0}, //405
  {0xA1,0x63,0x0,0x6A,0x41,0x0,0x45,0x2B,0x0,0x1E,0x12,0x0}, //406
  {0xA2,0x62,0x0,0x6B,0x40,0x0,0x47,0x2B,0x0,0x1F,0x12,0x0}, //407
  {0xA3,0x61,0x0,0x6C,0x40,0x0,0x48,0x2B,0x0,0x20,0x13,0x0}, //408
  {0xA4,0x60,0x0,0x6D,0x40,0x0,0x49,0x2A,0x0,0x20,0x13,0x0}, //409
  {0xA5,0x5F,0x0,0x6E,0x3F,0x0,0x4A,0x2A,0x0,0x21,0x13,0x0}, //410
  {0xA6,0x5E,0x0,0x70,0x3F,0x0,0x4B,0x2A,0x0,0x22,0x13,0x0}, //411
  {0xA7,0x5D,0x0,0x71,0x3F,0x0,0x4C,0x2A,0x0,0x23,0x13,0x0}, //412
  {0xA8,0x5C,0x0,0x72,0x3E,0x0,0x4E,0x2A,0x0,0x24,0x13,0x0}, //413
  {0xA9,0x5B,0x0,0x73,0x3E,0x0,0x4F,0x2A,0x0,0x25,0x14,0x0}, //414
  {0xAA,0x5A,0x0,0x75,0x3E,0x0,0x50,0x2A,0x0,0x26,0x14,0x0}, //415
  {0xAB,0x59,0x0,0x76,0x3D,0x0,0x51,0x2A,0x0,0x27,0x14,0x0}, //416
  {0xAC,0x58,0x0,0x77,0x3D,0x0,0x53,0x2A,0x0,0x28,0x14,0x0}, //417
  {0xAD,0x57,0x0,0x78,0x3C,0x0,0x54,0x2A,0x0,0x29,0x14,0x0}, //418
  {0xAE,0x56,0x0,0x7A,0x3C,0x0,0x55,0x2A,0x0,0x2A,0x14,0x0}, //419
  {0xAF,0x55,0x0,0x7B,0x3B,0x0,0x57,0x2A,0x0,0x2B,0x15,0x0}, //420
  {0xB0,0x54,0x0,0x7C,0x3B,0x0,0x58,0x2A,0x0,0x2C,0x15,0x0}, //421
  {0xB1,0x53,0x0,0x7E,0x3B,0x0,0x59,0x2A,0x0,0x2D,0x15,0x0}, //422
  {0xB2,0x52,0x0,0x7F,0x3A,0x0,0x5B,0x2A,0x0,0x2E,0x15,0x0}, //423
  {0xB3,0x51,0x0,0x80,0x3A,0x0,0x5C,0x29,0x0,0x2F,0x15,0x0}, //424
  {0xB4,0x50,0x0,0x82,0x39,0x0,0x5D,0x29,0x0,0x31,0x15,0x0}, //425
  {0xB5,0x4F,0x0,0x83,0x39,0x0,0x5F,0x29,0x0,0x32,0x15,0x0}, //426
  {0xB6,0x4E,0x0,0x84,0x38,0x0,0x60,0x29,0x0,0x33,0x16,0x0}, //427
  {0xB7,0x4D,0x0,0x86,0x38,0x0,0x62,0x29,0x0,0x34,0x16,0x0}, //428
  {0xB8,0x4C,0x0,0x87,0x37,0x0,0x63,0x29,0x0,0x36,0x16,0x0}, //429
  {0xB9,0x4B,0x0,0x88,0x37,0x0,0x65,0x29,0x0,0x37,0x16,0x0}, //430
  {0xBA,0x4A,0x0,0x8A,0x36,0x0,0x66,0x28,0x0,0x38,0x16,0x0}, //431
  {0xBB,0x49,0x0,0x8B,0x36,0x0,0x68,0x28,0x0,0x3A,0x16,0x0}, //432
  {0xBC,0x48,0x0,0x8C,0x35,0x0,0x69,0x28,0x0,0x3B,0x16,0x0}, //433
  {0xBD,0x47,0x0,0x8E,0x35,0x0,0x6B,0x28,0x0,0x3C,0x16,0x0}, //434
  {0xBE,0x46,0x0,0x8F,0x34,0x0,0x6C,0x28,0x0,0x3E,0x16,0x0}, //435
  {0xBF,0x45,0x0,0x91,0x34,0x0,0x6E,0x27,0x0,0x3F,0x17,0x0}, //436
  {0xC0,0x44,0x0,0x92,0x33,0x0,0x70,0x27,0x0,0x41,0x17,0x0}, //437
  {0xC1,0x43,0x0,0x94,0x33,0x0,0x71,0x27,0x0,0x42,0x17,0x0}, //438
  {0xC2,0x42,0x0,0x95,0x32,0x0,0x73,0x27,0x0,0x44,0x17,0x0}, //439
  {0xC3,0x41,0x0,0x97,0x32,0x0,0x74,0x26,0x0,0x46,0x17,0x0}, //440
  {0xC4,0x40,0x0,0x98,0x31,0x0,0x76,0x26,0x0,0x47,0x17,0x0}, //441
  {0xC5,0x3F,0x0,0x99,0x31,0x0,0x78,0x26,0x0,0x49,0x17,0x0}, //442
  {0xC6,0x3E,0x0,0x9B,0x30,0x0,0x7A,0x26,0x0,0x4B,0x17,0x0}, //443
  {0xC7,0x3D,0x0,0x9C,0x30,0x0,0x7B,0x25,0x0,0x4C,0x17,0x0}, //444
  {0xC8,0x3C,0x0,0x9E,0x2F,0x0,0x7D,0x25,0x0,0x4E,0x17,0x0}, //445
  {0xC9,0x3B,0x0,0x9F,0x2E,0x0,0x7F,0x25,0x0,0x50,0x17,0x0}, //446
  {0xCA,0x3A,0x0,0xA1,0x2E,0x0,0x81,0x25,0x0,0x52,0x17,0x0}, //447
  {0xCB,0x39,0x0,0xA2,0x2D,0x0,0x82,0x24,0x0,0x54,0x17,0x0}, //448
  {0xCC,0x38,0x0,0xA4,0x2D,0x0,0x84,0x24,0x0,0x56,0x17,0x0}, //449
  {0xCD,0x37,0x0,0xA6,0x2C,0x0,0x86,0x24,0x0,0x58,0x17,0x0}, //450
  {0xCE,0x36,0x0,0xA7,0x2B,0x0,0x88,0x23,0x0,0x5A,0x17,0x0}, //451
  {0xCF,0x35,0x0,0xA9,0x2B,0x0,0x8A,0x23,0x0,0x5C,0x17,0x0}, //452
  {0xD0,0x34,0x0,0xAA,0x2A,0x0,0x8C,0x23,0x0,0x5E,0x17,0x0}, //453
  {0xD1,0x33,0x0,0xAC,0x2A,0x0,0x8E,0x22,0x0,0x60,0x17,0x0}, //454
  {0xD2,0x32,0x0,0xAD,0x29,0x0,0x90,0x22,0x0,0x62,0x17,0x0}, //455
  {0xD3,0x31,0x0,0xAF,0x28,0x0,0x91,0x21,0x0,0x64,0x17,0x0}, //456
  {0xD4,0x30,0x0,0xB1,0x28,0x0,0x93,0x21,0x0,0x67,0x17,0x0}, //457
  {0xD5,0x2F,0x0,0xB2,0x27,0x0,0x95,0x21,0x0,0x69,0x17,0x0}, //458
  {0xD6,0x2E,0x0,0xB4,0x26,0x0,0x97,0x20,0x0,0x6B,0x17,0x0}, //459
  {0xD7,0x2D,0x0,0xB5,0x26,0x0,0x9A,0x20,0x0,0x6E,0x17,0x0}, //460
  {0xD8,0x2C,0x0,0xB7,0x25,0x0,0x9C,0x1F,0x0,0x70,0x16,0x0}, //461
  {0xD9,0x2B,0x0,0xB9,0x24,0x0,0x9E,0x1F,0x0,0x73,0x16,0x0}, //462
  {0xDA,0x2A,0x0,0xBA,0x24,0x0,0xA0,0x1E,0x0,0x75,0x16,0x0}, //463
  {0xDB,0x29,0x0,0xBC,0x23,0x0,0xA2,0x1E,0x0,0x78,0x16,0x0}, //464
  {0xDC,0x28,0x0,0xBE,0x22,0x0,0xA4,0x1D,0x0,0x7B,0x16,0x0}, //465
  {0xDD,0x27,0x0,0xBF,0x21,0x0,0xA6,0x1D,0x0,0x7D,0x16,0x0}, //466
  {0xDE,0x26,0x0,0xC1,0x21,0x0,0xA8,0x1C,0x0,0x80,0x16,0x0}, //467
  {0xDF,0x25,0x0,0xC3,0x20,0x0,0xAB,0x1C,0x0,0x83,0x15,0x0}, //468
  {0xE0,0x24,0x0,0xC5,0x1F,0x0,0xAD,0x1B,0x0,0x86,0x15,0x0}, //469
  {0xE1,0x23,0x0,0xC6,0x1E,0x0,0xAF,0x1B,0x0,0x89,0x15,0x0}, //470
  {0xE2,0x22,0x0,0xC8,0x1E,0x0,0xB1,0x1A,0x0,0x8C,0x15,0x0}, //471
  {0xE3,0x21,0x0,0xCA,0x1D,0x0,0xB4,0x1A,0x0,0x8F,0x14,0x0}, //472
  {0xE4,0x20,0x0,0xCC,0x1C,0x0,0xB6,0x19,0x0,0x92,0x14,0x0}, //473
  {0xE5,0x1F,0x0,0xCD,0x1B,0x0,0xB8,0x19,0x0,0x95,0x14,0x0}, //474
  {0xE6,0x1E,0x0,0xCF,0x1B,0x0,0xBB,0x18,0x0,0x98,0x13,0x0}, //475
  {0xE7,0x1D,0x0,0xD1,0x1A,0x0,0xBD,0x17,0x0,0x9B,0x13,0x0}, //476
  {0xE8,0x1C,0x0,0xD3,0x19,0x0,0xC0,0x17,0x0,0x9F,0x13,0x0}, //477
  {0xE9,0x1B,0x0,0xD4,0x18,0x0,0xC2,0x16,0x0,0xA2,0x12,0x0}, //478
  {0xEA,0x1A,0x0,0xD6,0x17,0x0,0xC5,0x15,0x0,0xA6,0x12,0x0}, //479
  {0xEB,0x19,0x0,0xD8,0x17,0x0,0xC7,0x15,0x0,0xA9,0x12,0x0}, //480
  {0xEC,0x18,0x0,0xDA,0x16,0x0,0xCA,0x14,0x0,0xAD,0x11,0x0}, //481
  {0xED,0x17,0x0,0xDC,0x15,0x0,0xCC,0x13,0x0,0xB0,0x11,0x0}, //482
  {0xEE,0x16,0x0,0xDE,0x14,0x0,0xCF,0x13,0x0,0xB4,0x10,0x0}, //483
  {0xEF,0x15,0x0,0xDF,0x13,0x0,0xD1,0x12,0x0,0xB8,0x10,0x0}, //484
  {0xF0,0x14,0x0,0xE1,0x12,0x0,0xD4,0x11,0x0,0xBC,0xF,0x0}, //485
  {0xF1,0x13,0x0,0xE3,0x11,0x0,0xD7,0x10,0x0,0xC0,0xF,0x0}, //486
  {0xF2,0x12,0x0,0xE5,0x11,0x0,0xD9,0x10,0x0,0xC4,0xE,0x0}, //487
  {0xF3,0x11,0x0,0xE7,0x10,0x0,0xDC,0xF,0x0,0xC8,0xD,0x0}, //488
  {0xF4,0x10,0x0,0xE9,0xF,0x0,0xDF,0xE,0x0,0xCC,0xD,0x0}, //489
  {0xF5,0xF,0x0,0xEB,0xE,0x0,0xE1,0xD,0x0,0xD0,0xC,0x0}, //490
  {0xF6,0xE,0x0,0xED,0xD,0x0,0xE4,0xD,0x0,0xD4,0xC,0x0}, //491
  {0xF7,0xD,0x0,0xEF,0xC,0x0,0xE7,0xC,0x0,0xD9,0xB,0x0}, //492
  {0xF8,0xC,0x0,0xF1,0xB,0x0,0xEA,0xB,0x0,0xDD,0xA,0x0}, //493
  {0xF9,0xB,0x0,0xF3,0xA,0x0,0xED,0xA,0x0,0xE2,0x9,0x0}, //494
  {0xFA,0xA,0x0,0xF5,0x9,0x0,0xF0,0x9,0x0,0xE6,0x9,0x0}, //495
  {0xFB,0x9,0x0,0xF7,0x8,0x0,0xF3,0x8,0x0,0xEB,0x8,0x0}, //496
  {0xFC,0x8,0x0,0xF8,0x7,0x0,0xF6,0x7,0x0,0xF0,0x7,0x0}, //497
  {0xFD,0x7,0x0,0xFA,0x6,0x0,0xF8,0x6,0x0,0xF5,0x6,0x0}, //498
  {0xFE,0x6,0x0,0xFC,0x5,0x0,0xFB,0x5,0x0,0xF9,0x5,0x0}, //499
  {0xFF,0x5,0x0,0xFC,0x5,0x0,0xFB,0x5,0x0,0x28,0x8,0x0} //500
};

const unsigned char miata_logo [] PROGMEM = 
{
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x3F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x03, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x07, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x1F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x3F, 0xFB, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00,
0x00, 0xFF, 0xF1, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00,
0x01, 0xFF, 0xC3, 0xF8, 0x0F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00,
0x03, 0xFF, 0x83, 0xF8, 0x3F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00,
0x1B, 0xFF, 0x03, 0xF8, 0x7F, 0xC0, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00,
0x1F, 0xFE, 0x07, 0xF1, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00,
0x3F, 0xFE, 0x07, 0xF3, 0xFF, 0xC0, 0x00, 0x7F, 0x00, 0x3F, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00,
0x3F, 0xFC, 0x07, 0xF7, 0xFF, 0xC0, 0x00, 0xFF, 0x00, 0x7F, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00,
0x7F, 0xF8, 0x0F, 0xCF, 0xFF, 0xC0, 0x01, 0xFF, 0x00, 0x7F, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00,
0x7F, 0xF0, 0x1F, 0xDF, 0xFF, 0xC3, 0x01, 0xFF, 0x00, 0x7F, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
0x7F, 0xE0, 0x1F, 0xFF, 0xDF, 0xDF, 0xE0, 0xFF, 0x00, 0x00, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00,
0x7F, 0xE0, 0x3F, 0xFF, 0xBF, 0xFF, 0xF0, 0x7F, 0x00, 0xE0, 0x01, 0xFE, 0x00, 0x00, 0x00, 0x00,
0x3F, 0xC0, 0x3F, 0xFF, 0x3F, 0xFF, 0xF8, 0x0F, 0x01, 0xFC, 0x01, 0xFC, 0x00, 0x00, 0x00, 0x00,
0x1F, 0xC0, 0x7F, 0xFE, 0x3F, 0xFF, 0xF8, 0x07, 0x03, 0xFF, 0xF1, 0xFC, 0x1E, 0x00, 0x00, 0x00,
0x0F, 0x00, 0x7F, 0xFC, 0x3F, 0xFF, 0xFC, 0x1F, 0x07, 0xFF, 0xF1, 0xFC, 0x3F, 0x80, 0x00, 0x00,
0x00, 0x00, 0xFF, 0xF8, 0x7F, 0xFF, 0xFC, 0x3F, 0x07, 0xFF, 0xF1, 0xFC, 0x7F, 0xC0, 0x00, 0x00,
0x00, 0x00, 0xFF, 0xF0, 0x7F, 0xFF, 0xFC, 0x3F, 0x0F, 0xFF, 0xF9, 0xFC, 0xFF, 0xF8, 0x00, 0x00,
0x00, 0x01, 0xFF, 0xE0, 0x7F, 0xFB, 0xFE, 0x1F, 0x9F, 0xFB, 0xF9, 0xFD, 0xFF, 0xFC, 0x00, 0x00,
0x00, 0x01, 0xFF, 0xC0, 0x7F, 0xFB, 0xFE, 0x1F, 0x9F, 0xFB, 0xF9, 0xFD, 0xFF, 0x3F, 0x00, 0x00,
0x00, 0x01, 0xFF, 0xC0, 0x7F, 0xFB, 0xFE, 0x1F, 0xFF, 0xF3, 0xFC, 0xFF, 0xFE, 0x3F, 0x80, 0x00,
0x00, 0x03, 0xFF, 0x80, 0x7F, 0xFB, 0xFE, 0x1F, 0xFF, 0xE1, 0xFC, 0xFF, 0xFC, 0x3F, 0xC0, 0x00,
0x00, 0x03, 0xFF, 0x00, 0x7F, 0xF3, 0xFE, 0x1F, 0xFF, 0xC1, 0xFE, 0xFF, 0xFC, 0x1F, 0xC0, 0x00,
0x00, 0x07, 0xFF, 0x00, 0x3F, 0xF3, 0xFE, 0x3F, 0xFF, 0x81, 0xFF, 0xFF, 0xFC, 0x1F, 0xC0, 0x00,
0x00, 0x07, 0xFE, 0x00, 0x3F, 0xF3, 0xFE, 0x7F, 0xFF, 0x83, 0xFF, 0xFF, 0xF8, 0x1F, 0xE0, 0x00,
0x00, 0x0F, 0xFC, 0x00, 0x1F, 0xE3, 0xFF, 0xFF, 0xFF, 0xC3, 0xFF, 0xFF, 0xF8, 0x0F, 0xF8, 0x00,
0x00, 0x0F, 0xFC, 0x00, 0x00, 0xC3, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFC, 0x1F, 0xFF, 0x00,
0x00, 0x1F, 0xF8, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0x98,
0x00, 0x1F, 0xF0, 0x00, 0x00, 0x01, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x78,
0x00, 0x3F, 0xE0, 0x00, 0x00, 0x00, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xFF, 0xF8,
0x00, 0x3F, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0xE0, 0x1F, 0xFF, 0x87, 0xFF, 0xFF, 0xE0, 0xFF, 0xF8,
0x00, 0x3F, 0xC0, 0x00, 0x00, 0x00, 0x7F, 0xC0, 0x07, 0xFF, 0x00, 0x01, 0xFF, 0xE0, 0x1F, 0xF0,
0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x03, 0xF6, 0x00, 0x00, 0x0F, 0x80, 0x03, 0x80,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

struct MSDataObject
{
  char name[MS_DATA_NAME_MAX_LENGTH];
  byte block;                         // max val 32?
  unsigned int offset;                // max val?
  byte reqbytes;                      // max val 8
  byte mult;                          // does this need to be * 0.1 ?
};

const MSDataObject MSData[] PROGMEM =
{
// string,  block, offset, reqbytes, mult,      div
  {"RPM",     7,    6,        2,      0   }, // 0
  {"AFR",     7,    252,      1,      0   }, // 1
  {"CLT",     7,    22,       2,      1   }, // 2
  {"MAP",     7,    18,       2,      1   }, // 3
  {"MAT",     7,    20,       2,      1   }, // 4
  {"SPKADV",  7,    8,        2,      1   }, // 5
  {"BATTV",   7,    26,       2,      1   }, // 6
  {"TPS",     7,    24,       2,      1   }, // 7
  {"Knock",   7,    32,       2,      1   }, // 8
  {"Baro",    7,    16,       2,      1   }, // 9
  {"EGOc",    7,    34,       2,      1   }, // 10
  {"IAC",     7,    54,       2,      0   }, // 11 -- this was GFC's to 49 / 125
  {"dwell",   7,    62,       2,      1   }, // 12
  {"bstduty", 7,    39,       1,      0   }, // 13 boost duty cycle
  {"idletar", 7,    380,      2,      0   }, // 14
  {"AFRtgt",  7,    12,       1,      1   }, // 15
};

struct MSDataBinaryObject 
{
  char name[MS_DATA_BIN_NAME_MAX_LENGTH];
  byte sbyte;
  byte bitp;
};

const MSDataBinaryObject MSDataBin[] PROGMEM =
{
// "1234567890"
//"name", indicator byte, bit position
//0 engine - block 7 offset 11
  {"Ready",            0,  0 },
  {"Crank",            0,  1 },
  {"ASE",              0,  2 },
  {"WUE",              0,  3 },
  {"TPS acc",          0,  4 },
  {"TPS dec",          0,  5 },
  {"MAP acc",          0,  6 },
  {"MAP dec",          0,  7 },
// 1 status1 - block 7 offset 78
  {"Need Burn",        1,  0,},
  {"Data Lost",        1,  1 },
  {"Config Error",     1,  2 },
  {"Synced",           1,  3 },
  {"VE1/2",            1,  5 },
  {"SPK1/2",           1,  6 },
  {"Full-sync",        1,  7 },
// 2 status2 - block 7 offset 79
  {"N2O 1",            2,  0 },
  {"N2O 2",            2,  1 },
  {"Rev lim",          2,  2 },
  {"Launch",           2,  2 },
  {"Flat shift",       2,  4 },
  {"Spark cut",        2,  5 },
  {"Over boost",       2,  6 },
  {"CL Idle",          2,  7 },
// 3 status3 - block 7 offset 80
  {"Fuel cut",         3,  0 },
//{"T-log",            3,  1 },
//{"3 step",           3,  2 },
//{"Test mode",        3,  3 },
//{"3 step",           3,  4 },
  {"Soft limit",       3,  5 },
//{"Bike shift",       3,  6 },
  {"Launch",           3,  7 },
// 4 check engine lamps - block 7 offset 425
  {"cel_map",          4,  0 },
  {"cel_mat",          4,  1 },
  {"cel_clt",          4,  2 },
  {"cel_tps",          4,  3 },
  {"cel_batt",         4,  4 },
  {"cel_afr0",         4,  5 },
  {"cel_sync",         4,  6 },
  {"cel_egt",          4,  7 },
// 5 port status - block 7 offset 70
  {"port0",            5,  0 },
  {"port1",            5,  1 },
  {"port2",            5,  2 },
  {"port3",            5,  3 },
  {"port4",            5,  4 },
  {"port5",            5,  5 },
  {"port6",            5,  6 },
// 6 status6 - block 7 offset 233
  {"EGT warn",         6,  0 },
  {"EGT shutdown",     6,  1 },
  {"AFR warn",         6,  2 },
  {"AFR shutdown",     6,  3 },
  {"Idle VE",          6,  4 },
  {"Idle VE",          6,  5 },
  {"Fan",              6,  6 },
// 7 status7 - block 7 offset 351
  {"Knock",            7,  4 },
  {"AC",               7,  5 },
};

long R_index = 0; // for rotary encoder
byte B_index = 0; // Button increment
byte M_index = 0; // Menu increment
byte S_index = 0; // Select increment

byte neo_brightness = 4;
byte g_textsize = 1;
char tempchars[11];

// -------------------------------------------------------------
static void hexDump(uint8_t dumpLen, uint8_t *bytePtr) 
{
  uint8_t working;
  while( dumpLen-- )
  {
    working = *bytePtr++;
    Serial.write( hex[ working>>4 ] );
    Serial.write( hex[ working&15 ] );
  }
  //Serial.write('\r');
  //Serial.write('\n');
}

static void binDump(char working)
{
  int i;
  for (i=7; i>=0; i--)
  {
    (bitRead(working,i) == 1) ? Serial.print("1") : Serial.print("0");
  }
}

static void ledBlink()
{
  ledTimer.reset();
  digitalWrite(led, 1);
}

// pack/unpack the Megasquirt extended message format header
typedef struct msg_packed_int
{
  unsigned char b0;
  unsigned char b1;
  unsigned char b2;
  unsigned char b3;
} msg_packed_int;

typedef struct msg_bit_info
{
  unsigned int spare:2;
  unsigned int block_h:1;
  unsigned int block:4;
  unsigned int to_id:4;
  unsigned int from_id:4;
  unsigned int msg_type:3;
  unsigned int offset:11;
} msg_bit_info;

typedef union
{
  unsigned int i;
  msg_packed_int b;
  msg_bit_info values;
} msg_packed;

msg_packed rxmsg_id,txmsg_id;

// unpack the vars from the payload of a MSG_REQ packet
typedef struct msg_req_data_packed_int
{
  unsigned char b2;
  unsigned char b1;
  unsigned char b0;
} msg_req_data_packed_int;

typedef struct msq_req_data_bit_info
{
  unsigned int varbyt:4;
  unsigned int spare:1;
  unsigned int varoffset:11;
  unsigned int varblk:4;
} msg_req_data_bit_info;

typedef union
{
  msg_req_data_packed_int bytes;
  msg_req_data_bit_info values;
} msg_req_data_raw;

msg_req_data_raw msg_req_data;

unsigned long validity_window; // for hi/low + histogram window update
unsigned long validity_window2;

byte histogram[64]; // 512 memory usage
byte histogram_index;

// touch "buttons"
int btnA,btnB,btnC;
int btnA_init,btnB_init,btnC_init;
int btnA_last,btnB_last,btnC_last;

struct btn
{
  unsigned int last:1;
  int init;
  int value;
};

btn buttons[3];

// -------------------------------------------------------------
void setup(void)
{
  digitalWrite(led, 1);
  SPI.setSCK(SPI_SCK); // alternate clock pin so we can still use the LED
  CANbus.begin();
  pinMode(led, OUTPUT);
  digitalWrite(led, 1);

  // Set encoder pins as input with internal pull-up resistors enabled
  pinMode(RBUTTON_INT, INPUT);
  digitalWrite(RBUTTON_INT, HIGH);
  attachInterrupt(RBUTTON_INT, ISR_debounce, FALLING);

  FastLED.show();

  // By default, we'll generate the high voltage from the 3.3v line internally! (neat!)
  display.begin(SSD1306_SWITCHCAPVCC);

  // Show splashscreen
  display.clearDisplay();
  display.drawBitmap(0,0, ms_logo, 128, 64, 1);
  display.display();

  FastLED.addLeds<NEOPIXEL, LEDPIN>(leds, NUM_LEDS);
  
  // Ring initialization animation
  for(int i = 0; i < NUM_LEDS; i++)
  {
    leds[i].setRGB(16,16,16);
    FastLED.show();
    delay(20);
  }
  delay(200);
  for (int j = NUM_LEDS; j > -1; j--) 
  {
    for(int i = 0; i < NUM_LEDS; i++)
    {
      leds[i].setRGB(j, j, j);
    }
    FastLED.show();
    delay(20);
  }

  delay(1000);
  digitalWrite(led, 0);
  //commTimer.reset();
}

// -------------------------------------------------------------
void loop(void)
{
  if (ledTimer.check() && digitalRead(led))
  {
    digitalWrite(led, 0);
    ledTimer.reset();
  }
  if (gaugeBlinkTimer.check())
  {
    gaugeBlink = gaugeBlink ^ 1;
    gaugeBlinkTimer.reset();
  }

  // see if we have gotten any CAN messages in the last second. display an error if not
  if (commTimer.check())
  {
    clear();
    display.setTextSize(1);
    display.setTextColor(WHITE);
    display.setCursor(0,56);
    display.println("Waiting for data...");
    display.setCursor(0,0);
    display.display();

    for(int i = 0; i < 16; i++)
    {
      leds[i].setRGB(0, 0, 0); // initialize led ring
    }
    FastLED.show();
    commTimer.reset();
    connectionState = false;
  }

  // main display routine
  if (connectionState && displayTimer.check())
  {
    R_index=myEnc.read()/4;
    if (! value_oob() )
    {
      switch (B_index)
      {
      case 0:
        gauge_vitals();
        break;
      case 1:
        gauge_single();
        break;
      case 2:
        gauge_histogram();
        break;
      case 3:
        gauge_debug();
        break;
      //case 4:
      //  gauge_danger();
      //  break;
      case 4:
        gauge_menu();
        break;
        //default: write_gauge_3(); break;
      }
      write_neopixel();

    } 
    else
    {
      gauge_warning();
      FastLED.show();
    }
    display.display();
    displayTimer.reset();
  }

  // handle received CAN frames
  if ( CANbus.read(rxmsg) )
  {
    commTimer.reset();
    connectionState = true;
    ledBlink();

    // ID's 1520+ are Megasquirt CAN broadcast frames
    switch (rxmsg.id)
    {
      case 1520: // 0
        RPM=(int)(word(rxmsg.buf[6], rxmsg.buf[7]));
        break;
      case 1521: // 1
        SPKADV=(int)(word(rxmsg.buf[0], rxmsg.buf[1]));
        indicator[0]=rxmsg.buf[3]; // engine
        AFRtgt=(int)(word(0x00, rxmsg.buf[4]));
        break;
      case 1522: // 2
        Baro=(int)(word(rxmsg.buf[0], rxmsg.buf[1]));
        MAP=(int)(word(rxmsg.buf[2], rxmsg.buf[3]));
        MAT=(int)(word(rxmsg.buf[4], rxmsg.buf[5]));
        CLT=(int)(word(rxmsg.buf[6], rxmsg.buf[7]));
        break;
      case 1523: // 3
        TPS=(int)(word(rxmsg.buf[0], rxmsg.buf[1]));
        BATTV=(int)(word(rxmsg.buf[2], rxmsg.buf[3]));
        break;
      case 1524: // 4
        Knock=(int)(word(rxmsg.buf[0], rxmsg.buf[1]));
        EGOc=(int)(word(rxmsg.buf[2], rxmsg.buf[3]));
        break;
      case 1526: // 6
        IAC=(int)(word(rxmsg.buf[6], rxmsg.buf[7])); //IAC = (IAC * 49) / 125;
      case 1529: // 9
        dwell=(int)(word(rxmsg.buf[4], rxmsg.buf[5]));
        break;
      case 1530: // 10
        indicator[1]=rxmsg.buf[0]; // status 1
        indicator[2]=rxmsg.buf[1]; // status 2
        indicator[3]=rxmsg.buf[2]; // status 3
        indicator[6]=rxmsg.buf[6]; // status 6
        indicator[7]=rxmsg.buf[7]; // status 7
        break;
      case 1537: // 17
        bstduty=(int)(word(rxmsg.buf[4], rxmsg.buf[5]));
        break;
      case 1548: // 28
        idle_tar=(int)(word(rxmsg.buf[0], rxmsg.buf[1]));
        break;
      case 1551: // 31
        AFR=(int)(word(0x00, rxmsg.buf[0]));
        //afr = rxmsg.buf[0];
        break;
      case 1574: // 54
        indicator[4]=rxmsg.buf[2]; // cel
        break;
      default: 
        // not a broadcast packet
        // assume this is a normal Megasquirt CAN protocol packet and decode the header
        if (rxmsg.ext)
        {
          rxmsg_id.i = rxmsg.id;
          // is this being sent to us?
          if (rxmsg_id.values.to_id == myCANid)
          {
            switch (rxmsg_id.values.msg_type)
            {
            case 1: // MSG_REQ - request data
              // the data required for the MSG_RSP header is packed into the first 3 data bytes
              msg_req_data.bytes.b0 = rxmsg.buf[0];
              msg_req_data.bytes.b1 = rxmsg.buf[1];
              msg_req_data.bytes.b2 = rxmsg.buf[2];
              // Create the tx packet header
              txmsg_id.values.msg_type = 2; // MSG_RSP
              txmsg_id.values.to_id = msCANid; // Megasquirt CAN ID should normally be 0
              txmsg_id.values.from_id = myCANid;
              txmsg_id.values.block = msg_req_data.values.varblk;
              txmsg_id.values.offset = msg_req_data.values.varoffset;
              txmsg.ext = 1;
              txmsg.id = txmsg_id.i;
              txmsg.len = 8;
              // Use the same block and offset as JBPerf IO expander board for compatibility reasons
              // Docs at http://www.jbperf.com/io_extender/firmware/0_1_2/io_extender.ini (or latest version)

              // realtime clock
              if (rxmsg_id.values.block == 7 && rxmsg_id.values.offset == 110)
              {
                /*
                  rtc_sec          = scalar, U08,  110, "", 1,0
                  rtc_min          = scalar, U08,  111, "", 1,0
                  rtc_hour         = scalar, U08,  112, "", 1,0
                  rtc_day          = scalar, U08,  113, "", 1,0 // not sure what "day" means. seems to be ignored...
                  rtc_date         = scalar, U08,  114, "", 1,0
                  rtc_month        = scalar, U08,  115, "", 1,0
                  rtc_year         = scalar, U16,  116, "", 1,0
                */

                // only return clock info if the local clock has actually been set (via GPS or RTC)
                if (timeStatus() == timeSet)
                {
                  txmsg.buf[0] = second();
                  txmsg.buf[1] = minute();
                  txmsg.buf[2] = hour();
                  txmsg.buf[3] = 0;
                  txmsg.buf[4] = day();
                  txmsg.buf[5] = month();
                  txmsg.buf[6] = year() / 256;
                  txmsg.buf[7] = year() % 256;
                  // send the message!
                  CANbus.write(txmsg);
                }
              } 
            }
          }
        }
        else
        {
          Serial.write("ID: ");
          Serial.print(rxmsg.id);
        }
    }
  }
  if (Serial.available())
  {
    byte incomingByte = Serial.read();
    switch(incomingByte)
    {
    case '1':
      // increment encoder
      R_index--;
      break;
    case '2':
      // decrement encoder
      R_index++;
      break;
    case '3':
      // press button
      clear();
      if (S_index != 0)
      {
        // deselect brightness
        S_index=0;
        clear();
        return;
      }
      if (B_index < 5)
      {
        B_index++;
        M_index=0;
        R_index=0;
        myEnc.write(0);
      }
      if (B_index == 5)
      {
        //menu settings
        B_index=5;
        if (R_index >= 3)
        {
          //save selected - return to main menu
          M_index=0;
          B_index=0;
          R_index=0;
          myEnc.write(0);
          S_index=0;
        }
        if (R_index == 1)
        {
          // select brightness
          S_index=1;
        }
        if (R_index == 2)
        {
          // select text size, though not implemented
          S_index=2;
        }
      }
      break;
    }
    Serial.print(B_index);
    Serial.print(" ");
    Serial.print(R_index);
    Serial.print(" ");
    Serial.print(M_index);
    Serial.print(" ");
    Serial.println(S_index);
  }
}

void clear()
{
  // used where display.clearDisplay() would normally be called so that we can make sure certain status
  // indicators are always shown.
  display.clearDisplay();

  // there is no room for the GPS status on other than the main screen
  if (B_index == 0)
  {
    display.setCursor(116,0);
    display.setTextSize(1);
    display.setTextColor(WHITE);
  }
}

void divby10(int val)
{
  byte length;

  itoa(val, tempchars, 10);
  length=strlen(tempchars);

  tempchars[length + 1]=tempchars[length]; // null shift right
  tempchars[length]=tempchars[length - 1]; //
  tempchars[length - 1]='.';
}

// interrupt handler for the encoder button
void ISR_debounce ()
{
  if((long)(millis() - last_millis) >= (debouncing_time * 10))
  {
    clear();
    if (S_index != 0)
    {
      // deselect brightness
      S_index=0;
      clear();
      return;
    }
    if (B_index < 4)
    {
      B_index++;
      M_index=0;
      R_index=0;
      myEnc.write(0);
    }
    if (B_index == 4)
    {
      //menu settings
      if (R_index >= 3)
      {
        //save selected - return to main menu
        M_index=0;
        B_index=0;
        R_index=0;
        myEnc.write(0);
        S_index=0;
      }
      if (R_index == 1)
      {
        S_index=1; // select brightness
      }
      if (R_index == 2)
      {
        S_index=2; // select text size, though not implemented
      }
    } // end B_index5
  }
  else
  {
    //end button
    return;
  }
  last_millis = millis();
}

// TODO: Delete this?
void gauge_histogram()
{
  byte val;

  val = AFR - 100; // temporary

  // 10hz update time
  if (millis() > (validity_window + 80))
  {
    clear();

    if (R_index > 2 || R_index < 0)
    {
      R_index=0;
      myEnc.write(0);
    }
    switch (R_index)
    {
    // 0-50 value normalization
    case 0:
      val = (AFR - 100) / 2;  // real rough estimation here here of afr on a 0-50 scale
      if (val > 50)
      {
        val=50;
      }
      break;
    case 1:
      val = ((MAP/10) - 30) / 4;
      if (val > 50)
      {
        val = 50;
      }
      break;
    case 2:
      val = (MAT/10) / 4;
      if (val > 50)
      {
        val = 50;
      }
      break;
    }

    histogram_index++;
    if (histogram_index >=64)
    {
      histogram_index=0;
    }
    histogram[histogram_index]=val;

    for (byte i = 0; i < 64; i++)
    {
      int x = histogram_index - i;
      if ( x < 0)
      {
        x = 64 + histogram_index - i;
      }
      display.drawFastVLine((128 - (i * 2)), (64 - histogram[x]), 64, WHITE);
      display.drawFastVLine((127 - (i * 2)), (64 - histogram[x]), 64, WHITE);
    }

    display.setCursor(8,0);
    display.setTextSize(2);
    display.setTextColor(WHITE);

    switch (R_index)
    {
    case 0:
      display.print("AFR ");
      divby10(AFR);
      display.print(tempchars);
      display.drawFastHLine(0, 40, 128, WHITE); // stoich 14.7 line
      for (byte x=1; x < 128; x = x + 2)
      {
        display.drawPixel(x, 40, BLACK);
      }
      break;
    case 1:
      display.print("MAP ");
      display.print(MAP/10);
      display.drawFastHLine(0, 47, 128, WHITE); // Baro line.. roughly 98kpa
      for (byte x=1; x < 128; x = x + 2)
      {
        display.drawPixel(x, 47, BLACK);
      }
      break;
    case 2:
      display.print("MAT ");
      display.print(MAT / 10);
      break;
    }

    /*  refresh rate debug
      display.setCursor(50, 0);
      display.setTextSize(1);
      display.setTextColor(WHITE);
      display.print(" t");
      display.print((millis() - validity_window));
      display.print(" v");
      display.print(val);
      */
    validity_window=millis();
    // display.display();
  }
}

boolean value_oob()
{
  if (RPM > 100)
  {
    if ((CLT/10) > 260) return 1;
    // if (OILP < 7 ) return 1;
    // if (RPM > 7600 ) return 1;
    // if (EGT > 1550 ) return 1;
    // if (indicator[4] != 0) return 1;
  } 
  else
  {
    return false;
  }

  if ( bitRead(indicator[2],6) == 1)
  {
    return true; // overboost
  }
  // if (RPM > 6800) 
  // {
  //   return true;
  // }
  return false;
}

void gauge_warning()
{
  byte dlength, llength;
  int midpos;

  clear();

  if (RPM > 6800)
  {
    dlength=4;
    llength=3;
    midpos=(63 - ((dlength * 23) / 2));
    display.setTextColor(WHITE);
    display.setCursor(midpos,0);
    display.setTextSize(4);
    display.print(RPM);

    display.setTextSize(2);
    display.setCursor(8, (63 - 15));
    display.print("RPM");

    for (byte i = 0; i < 16; i++)
    {
      leds[i].setRGB(0, 0, 0);
    } // zero out

    byte i = ((RPM - 6800) / 50);

    for (byte p=0; p < i; p++)
    {
      if (i <= 2)
      {
        leds[p+14].setRGB(((255 * neo_brightness) / 16), 0, 0);
      }
      else
      {
        leds[14].setRGB(((255 * neo_brightness) / 16), 0, 0);
        leds[15].setRGB(((255 * neo_brightness) / 16), 0, 0);
        leds[p-2].setRGB(((255 * neo_brightness) / 16), 0, 0);
      }
    }
  }

  if ((CLT/10) > 260)
  {
    dlength=3;
    llength=3;
    midpos=(63 - ((dlength * 23) / 2));
    display.setTextColor(WHITE);
    display.setCursor(midpos,0);
    display.setTextSize(4);
    display.print(CLT/10);

    display.setTextSize(2);
    display.setCursor(8, (63 - 15));
    display.print("CLT");
    for (byte i=0; i < 16; i++)
    {
      neogauge(999, i, 0);
    }
  }

  if (bitRead(indicator[4], 0))
  {
    display.setTextColor(WHITE);
    dlength=3;
    midpos=(63 - ((dlength * 23) / 2));
    display.setCursor(29, 0);
    display.setTextSize(4);
    display.print("MAP");
    display.setTextSize(2);
    display.setCursor(8, 48);
    display.print("Error");
    for (byte i=0; i < 16; i++)
    {
      neogauge(999, i, 0);
    }
  }

  if (bitRead(indicator[4], 1))
  {
    display.setTextColor(WHITE);
    dlength=3;
    midpos=(63 - ((dlength * 23) / 2));
    display.setCursor(29, 0);
    display.setTextSize(4);
    display.print("MAT");
    display.setTextSize(2);
    display.setCursor(8, 48);
    display.print("Error");
    for (byte i=0; i < 16; i++)
    {
      neogauge(999, i, 0);
    }

  }

  if (bitRead(indicator[4], 2))
  {
    display.setTextColor(WHITE);
    dlength=3;
    midpos=(63 - ((dlength * 23) / 2));
    display.setCursor(29, 0);
    display.setTextSize(4);
    display.print("CLT");
    display.setTextSize(2);
    display.setCursor(8, 48);
    display.print("Error");
    for (byte i=0; i < 16; i++)
    {
      neogauge(999, i, 0);
    }
  }

  if (bitRead(indicator[4], 3))
  {
    display.setTextColor(WHITE);
    dlength=3;
    midpos=(63 - ((dlength * 23) / 2));
    display.setCursor(29, 0);
    display.setTextSize(4);
    display.print("TPS");
    display.setTextSize(2);
    display.setCursor(8, 48);
    display.print("Error");
    for (byte i=0; i < 16; i++)
    {
      neogauge(999, i, 0);
    }

  }

  if (bitRead(indicator[4], 4))
  {
    display.setTextColor(WHITE);
    dlength=3;
    midpos=(63 - ((dlength * 23) / 2));
    display.setCursor(29, 0);
    display.setTextSize(4);
    display.print("BATT");
    display.setTextSize(2);
    display.setCursor(8, 48);
    display.print("Error");
    for (byte i=0; i < 16; i++)
    {
      neogauge(999, i, 0);
    }
  }

  if (bitRead(indicator[4], 5))
  {
    display.setTextColor(WHITE);
    dlength=3;
    midpos=(63 - ((dlength * 23) / 2));
    display.setCursor(29, 0);
    display.setTextSize(4);
    display.print("AFR");
    display.setTextSize(2);
    display.setCursor(8, 48);
    display.print("Error");
    for (byte i=0; i < 16; i++)
    {
      neogauge(999, i, 0);
    }
  }

  if (bitRead(indicator[4], 6))
  {
    display.setTextColor(WHITE);
    dlength=3;
    midpos=(63 - ((dlength * 23) / 2));
    display.setCursor(29, 0);
    display.setTextSize(4);
    display.print("Sync");
    display.setTextSize(2);
    display.setCursor(8, 48);
    display.print("Error");
    for (byte i=0; i < 16; i++)
    {
      neogauge(999, i, 0);
    }
  }

  if (bitRead(indicator[4], 7))
  {
    display.setTextColor(WHITE);
    dlength=3;
    midpos=(63 - ((dlength * 23) / 2));
    display.setCursor(29, 0);
    display.setTextSize(4);
    display.print("EGT");
    display.setTextSize(2);
    display.setCursor(8, 48);
    display.print("Error");
    for (byte i=0; i < 16; i++)
    {
      neogauge(999, i, 0);
    }
  }

  if ( bitRead(indicator[2],6) == 1)
  {
    gauge_danger();
  }

}

void gauge_debug()
{
  clear();
  display.setCursor(32,0);
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.print("m");
  display.print(M_index);
  display.print("r");
  display.print(R_index);
  display.print("s");
  display.print(S_index);
  display.print("b");
  display.println(B_index);

  display.display();
}

void gauge_vitals()
{
  //hard coded for style
  // fonts are 5x7 * textsize
  // size 1 .. 5 x 7
  // size 2 .. 10 x 14
  //Vitals - AFR, RPM, MAP,
  clear();

  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(0,0);

  display.setCursor(41, 0); // 4 char normally - 4 * 10 = 40, - 128 = 88, /2 = 44
  display.println(RPM);
  display.setTextSize(1);
  display.setCursor(21, 7);
  display.print("RPM");

  //line2
  display.setCursor(0, 26);
  display.setTextSize(1);
  display.print("AFR");
  display.setCursor(20, 19);
  display.setTextSize(2);
  divby10(AFR);
  display.print(tempchars);

  display.setCursor(72, 25);
  display.setTextSize(1);
  display.print("CLT");
  display.setCursor(88, 18);
  display.setTextSize(2);
  display.print(CLT/10);

  //line3
  display.setCursor(0, 40);
  display.setTextSize(1);
  display.print("MAP");
  display.setCursor(20, 40);
  display.setTextSize(2);
  display.print(MAP/10);

  // contextual gauge - if idle on, show IAC%
  if ( bitRead(indicator[2],7) == 1)
  {
    display.setCursor(72, 47);
    display.setTextSize(1);
    display.print("IAC");
    display.setCursor(92, 40);
    display.setTextSize(2);
    display.print(IAC);
  }
  else if (MAP > Baro)
  {
    int psi;
    display.setCursor(72, 38);
    display.setTextSize(1);
    display.print("PSI");
    display.setCursor(92, 38);
    display.setTextSize(1);
    // 6.895kpa = 1psi
    psi = MAP - Baro;
    psi=(psi * 200) / 1379;
    divby10(psi);
    display.print(tempchars);

    display.setCursor(72, 47);
    display.setTextSize(1);
    display.print("MAT");
    display.setCursor(92, 47);
    display.print(MAT/10);

  }
  else
  {
    display.setCursor(72, 47);
    display.setTextSize(1);
    display.print("MAT");
    display.setCursor(92,40);
    display.setTextSize(2);
    display.print(MAT/10);
  }

  gauge_bottom();
}

void gauge_bottom()
{
  display.setTextSize(1);
  display.drawFastHLine(1, (63 - 7), 126, WHITE);
  display.setCursor(0, 57);
  display.setTextColor(BLACK, WHITE);

  //CEL
  if ( indicator[4] != 0 )
  {
    display.setTextColor(BLACK, WHITE);
    display.drawFastVLine(2, 57, 8, WHITE);
  }
  else
  {
    display.setTextColor(WHITE);
  }
  display.setCursor(3, 57);
  display.print("CEL");
  display.drawFastVLine(1, 57, 8, WHITE);

  //Fan
  if ( bitRead(indicator[6],6) == 1)
  {
    display.setTextColor(BLACK, WHITE);
    display.drawFastVLine(23, 57, 8, WHITE);
    display.drawFastVLine(22, 57, 8, WHITE);
    display.drawFastVLine(42, 57, 8, WHITE);
  }
  else
  {
    display.setTextColor(WHITE);
  }
  display.setCursor(24, 57);
  display.print("Fan");
  display.drawFastVLine(21, 57, 8, WHITE);

  //Idle
  if ( bitRead(indicator[2],7) == 1)
  {
    display.setTextColor(BLACK, WHITE);
    display.drawFastVLine(44, 57, 8, WHITE);
  }
  else
  {
    display.setTextColor(WHITE);
  }
  display.setCursor(45, 57);
  display.print("Idl");
  display.drawFastVLine(43, 57, 8, WHITE);

  //Knock
  if ( bitRead(indicator[7],4) == 1)
  {
    display.setTextColor(BLACK, WHITE);
    display.drawFastVLine(65, 57, 8, WHITE);
    display.drawFastVLine(64, 57, 8, WHITE);
    display.drawFastVLine(84, 57, 8, WHITE);
  }
  else
  {
    display.setTextColor(WHITE);
  }
  display.setCursor(66, 57);
  display.print("Knk");
  display.drawFastVLine(63, 57, 8, WHITE);

  //Overboost
  if ( bitRead(indicator[2],6) == 1)
  {
    display.setTextColor(BLACK, WHITE);
    display.drawFastVLine(87, 57, 8, WHITE);
    display.drawFastVLine(86, 57, 8, WHITE);
  }
  else
  {
    display.setTextColor(WHITE);
  }
  display.setCursor(88, 57);
  display.print("Bst");
  display.drawFastVLine(85, 57, 8, WHITE);

  //WUE
  if ( bitRead(indicator[0],3) == 1)
  {
    display.setTextColor(BLACK, WHITE);
    display.drawFastVLine(107, 57, 8, WHITE);
  }
  else
  {
    display.setTextColor(WHITE);
  }
  display.setCursor(108, 57);
  display.print("WUE");
  display.drawFastVLine(106, 57, 8, WHITE);
  display.drawFastVLine(126, 57, 8, WHITE);

  // FAN, WUE, ASE, CEL, Idl, Knk, over boost
  // CEL - Idl - FAN - KnK - BST - AFR
  display.display();
}

void gauge_single()
{
  byte mult_test;
  char data[10];
  String label;
  byte temp_index;
  clear();

  if (R_index < 0)
  {
    myEnc.write(0);
    R_index=0;
  }

  if (R_index <= 15)
  {
    switch (R_index)
    {
      case 0:
        label="RPM";
        itoa(RPM, data, 10);
        break;
      case 1:
        label="AFR";
        divby10(AFR);
        strcpy(data, tempchars);
        break;
      case 2:
        label="Coolant";
        divby10(CLT);
        strcpy(data, tempchars);
        break;
      case 3:
        label="MAP";
        divby10(MAP);
        strcpy(data, tempchars);
        break;
      case 4:
        label="MAT";
        divby10(MAT);
        strcpy(data, tempchars);
        break;
      case 5:
        label="Timing";
        divby10(SPKADV);
        strcpy(data, tempchars);
        break;
      case 6:
        label="Voltage";
        divby10(BATTV);
        strcpy(data, tempchars);
        break;
      case 7:
        label="TPS";
        divby10(TPS);
        strcpy(data, tempchars);
        break;
      case 8:
        label="Knock";
        divby10(Knock);
        strcpy(data, tempchars);
        break;
      case 9:
        label="Barometer";
        divby10(Baro);
        strcpy(data, tempchars);
        break;
      case 10:
        label="EGO Corr";
        divby10(EGOc);
        strcpy(data, tempchars);
        break;
      case 11:
        label="IAC";
        itoa(IAC, data, 10);
        break;
      case 12:
        label="Spark Dwell";
        divby10(dwell);
        strcpy(data, tempchars);
        break;
      case 13:
        label="Boost Duty";
        itoa(bstduty, data, 10);
        break;
      case 14:
        label="Idle Target";
        itoa(idle_tar, data, 10);
        break;
      case 15:
        label="AFR Target";
        divby10(AFRtgt);
        strcpy(data, tempchars);
        break;
    }
  }
  else
  {
    temp_index = R_index - 15;
    char temporary[15];
    byte sbyte, bitp, dbit;
    strcpy_P(temporary, MSDataBin[temp_index].name);
    label=temporary;

    sbyte=pgm_read_byte(&MSDataBin[temp_index].sbyte);
    bitp=pgm_read_byte(&MSDataBin[temp_index].bitp);
    dbit=bitRead(indicator[sbyte], bitp);
    if ( dbit == 1 )
    {
      data[0]='O';
      data[1]='n';
      data[2]='\0';
    }
    else
    {
      data[0]='O';
      data[1]='f';
      data[2]='f';
      data[3]='\0';
    }

  }

  byte dlength=strlen(data);
  byte llength=label.length();
  int midpos;

  // dlength * (width of font) / 2 -1
  // size 2 = 11
  // size 3 = 17
  // size 4 = 23

  midpos = (63 - ((dlength * 23)/ 2));

  display.setTextColor(WHITE);
  display.setCursor(midpos,0);
  display.setTextSize(4);
  display.print(data);

  display.setTextSize(2);
  display.setCursor(8, (63 - 15));
  display.print(label);

  // unsigned int MAP_HI, Knock_HI, RPM_HI, CLT_HI, MAT_HI;
  // int AFR_HI, AFR_LO;

  //Additional Hi-Lo's for niftiness
  if (R_index == 0)
  {
    if (millis() > (validity_window + 30000))
    {
      //after 30 seconds from latest high, set new high
      RPM_HI = RPM;
      validity_window=millis();
    }
    if (RPM > RPM_HI)
    {
      RPM_HI = RPM;
      validity_window=millis();
    }
    display.setTextSize(2);
    display.setCursor((127 - 48), 31);
    display.print(RPM_HI);
  }

  if (R_index == 1)
  {
    if (millis() > (validity_window + 30000))
    {
      //after 30 seconds from latest high, set new high
      AFR_HI = AFR;
      validity_window=millis();
    }
    if (millis() > (validity_window2 + 30000))
    {
      //after 30 seconds from latest high, set new high
      AFR_LO = AFR;
      validity_window2=millis();
    }
    if (AFR > AFR_HI)
    {
      AFR_HI = AFR;
      validity_window=millis();
    }
    if (AFR < AFR_LO)
    {
      AFR_LO = AFR;
      validity_window2=millis();
    }
    display.setTextSize(2);
    display.setCursor(0, 31);
    divby10(AFR_LO);
    display.print(tempchars);
    display.setCursor((127 - 48), 31);
    divby10(AFR_HI);
    display.print(tempchars);
  }

  if (R_index == 2
   {
    if (millis() > (validity_window + 30000))
    {
      //after 30 seconds from latest high, set new high
      CLT_HI = CLT;
      validity_window=millis();
    }
    if (CLT > CLT_HI)
    {
      CLT_HI = CLT;
      validity_window=millis();
    }
    display.setTextSize(2);
    display.setCursor((127 - 60), 31);
    divby10(CLT_HI);
    display.print(tempchars);
  }

  if (R_index == 3)
  {
    if (millis() > (validity_window + 30000))
    {
      //after 30 seconds from latest high, set new high
      MAP_HI = MAP;
      validity_window=millis();
    }
    if (MAP > MAP_HI)
    {
      MAP_HI = MAP;
      validity_window=millis();
    }
    display.setTextSize(2);
    display.setCursor((127 - 48), 31);
    divby10(MAP_HI);
    display.print(tempchars);
  }

  if (R_index == 4)
  {
    if (millis() > (validity_window + 30000))
    {
      //after 30 seconds from latest high, set new high
      MAT_HI = MAT;
      validity_window=millis();
    }
    if (MAT > MAT_HI)
    {
      MAT_HI = MAT;
      validity_window=millis();
    }
    display.setTextSize(2);
    display.setCursor((127 - 48), 31);
    divby10(MAT_HI);
    display.print(tempchars);
  }

  if (R_index == 8)
  {
    if (millis() > (validity_window + 30000))
    {
      //after 30 seconds from latest high, set new high
      Knock_HI = Knock;
      validity_window=millis();
    }
    if (Knock > Knock_HI)
    {
      Knock_HI = Knock;
      validity_window=millis();
    }
    display.setTextSize(2);
    display.setCursor((127 - 48), 31);
    divby10(Knock_HI);
    display.print(tempchars);
  }
  // display.display();
}

void gauge_menu()
{
  // display.setTextSize(1);display.setTextColor(WHITE);display.print("m");display.print(M_index); display.print("r"); display.print(R_index);display.print("s"); display.print(S_index);display.print("b");display.println(B_index);display.setTextSize(2);

  if (R_index < 0)
  {
    R_index = 0;
  }

  display.setTextColor(WHITE);
  clear();
  display.setCursor(0,0);
  display.setTextSize(2);

  if (S_index == 0)
  {
    if (R_index > 3)
    {
      R_index = 3;
    }
    switch (R_index)
    {
      case 0:
        //line1
        display.setTextColor(BLACK, WHITE);
        display.println("_Menu");
        //line2
        display.setTextColor(WHITE);
        display.print("Lum: ");
        display.println(neo_brightness);
        //line3
        display.print("Text: ");
        display.println(g_textsize);
        //line4
        display.print("Save");
        display.display();
        break;

      case 1: //brightness selected
        //line1
        display.setTextColor(WHITE);
        display.println("_Menu");
        //line2
        display.setTextColor(BLACK, WHITE);
        display.print("Lum: ");
        display.println(neo_brightness);
        //line3
        display.setTextColor(WHITE);
        display.print("Text: ");
        display.println(g_textsize);
        //line4
        display.print("Save");
        display.display();
        break;

      case 2: //text size selected
        //line1
        display.setTextColor(WHITE);
        display.println("_Menu");
        //line2
        display.print("Lum: ");
        display.println(neo_brightness);
        //line3
        display.setTextColor(BLACK, WHITE);
        display.print("Text: ");
        display.println(g_textsize);
        //line4
        display.setTextColor(WHITE);
        display.print("Save");
        display.display();
        break;

      case 3: //save selected
        //line1
        display.setTextColor(WHITE);
        display.println("_Menu");
        //line2
        display.print("Lum: ");
        display.println(neo_brightness);
        //line3
        display.setTextColor(WHITE);
        display.print("Text: ");
        display.println(g_textsize);
        //line4
        display.setTextColor(BLACK, WHITE);
        display.print("Save");
        display.display();
        break;
    } //end switch
  } // end S_index 0

  if (S_index == 1)
  {
    neo_brightness=R_index;
    clear();
    display.setCursor(0,0);
    if (R_index > 8)
    {
      R_index = 8;
      myEnc.write(8*4);
      neo_brightness = 8;
    }
    if (R_index < 1)
    {
      R_index = 1;
      myEnc.write(1);
      neo_brightness=1;
    }

    //line1
    display.setTextColor(WHITE);
    display.println("_Menu");
    //line2
    display.setTextColor(BLACK, WHITE);
    display.print("Lum: ");
    display.println(neo_brightness);
    //line3
    display.setTextColor(WHITE);
    display.print("Text: ");
    display.println(g_textsize);
    //line4
    display.print("Save");
    display.display();
  }// brightness selection, end S_index 1

  if (S_index == 2)
  {
    // temp=M_index;
    g_textsize=R_index;
    // if (R_index > 4)
    // {
    //   R_index = 4;
    //   myEnc.write(16);
    //   g_textsize = 4;
    // }
    if (R_index < 1)
    {
      R_index = 1;
      myEnc.write(4);
      g_textsize=1;
    }

    //line1
    display.setTextColor(WHITE);
    display.println("_Menu");
    //line2
    display.print("Lum: ");
    display.println(neo_brightness);
    //line3
    display.setTextColor(BLACK, WHITE);
    display.print("Text: ");
    display.println(g_textsize);
    //line4
    display.setTextColor(WHITE);
    display.print("Save");
    display.display();
  } // text size selection S_index 2
} // end gauge_menu

void gauge_danger()
{
  display.setTextSize(2);
  display.setTextColor(WHITE);
  clear();
  display.setCursor(0,0);

  display.setCursor(4,0);
  display.setTextSize(2);
  display.print("Warning");
  display.print("!");
  display.print("!");
  display.print("!");

  display.setCursor(10,28);
  display.print("Danger to");
  display.setCursor(12,45);
  display.println("Manifold");
  // display.display();
}

int freeRam ()
{
  extern int __heap_start, *__brkval;
  int v;
  return (int) &v - (__brkval == 0 ? (int) &__heap_start : (int) __brkval);
}

void bytePrint(byte victim)
{
  boolean temp;
  Serial.print("b");
  for (int x = 7; x >=0; x--)
  {
    temp=bitRead(victim,x);
    Serial.print(temp,BIN);
  }
}

void neogauge(int val, byte led, byte enable_warning)
{
  unsigned int red, green, blue;
  val = val/2;

  if ( val > 500 )
  {
    if (enable_warning > 0)
    {
      leds[led].setRGB(0, 0, 0);
      FastLED.show();
      delay(50);
      red = (255 * neo_brightness) / 16;
      leds[led].setRGB(red, 0, 0);
      FastLED.show();
    }
    else
    {
      red = (255 * neo_brightness) / 16;
      leds[led].setRGB(red, 0, 0);
      FastLED.show();
    }
  }
  else if ( val < 0 )
  {
    if (enable_warning > 0)
    {
      leds[led].setRGB(0, 0, 0);
      FastLED.show();
      delay(50);
      blue = (255 * neo_brightness) / 16;
      leds[led].setRGB(0, 0, blue);
      FastLED.show();
    }
    else
    {
      blue = (255 * neo_brightness) / 16;
      leds[led].setRGB(0, 0, blue);
      FastLED.show();
    }
  }
  else if ((val >= 0) && (val <= 500))
  {
    red =   pgm_read_byte (&ledarray[val].r0);
    green = pgm_read_byte (&ledarray[val].g0);
    blue =  pgm_read_byte (&ledarray[val].b0);
    red = (red * neo_brightness) / 16;
    green = (green * neo_brightness) / 16;
    blue = (blue * neo_brightness) / 16;
    leds[led].setRGB(red, green, blue);
    // FastLED.show();
  }
}

void neogauge4led(int val, byte led0, byte led1, byte led2, byte led3, byte enable_warning)
{
  unsigned int red, green, blue;
  val = val/2;

  if ( val > 500 )
  {
    if (enable_warning > 0 && !gaugeBlink)
    {
      leds[led0].setRGB(0, 0, 0);
      leds[led1].setRGB(0, 0, 0);
      leds[led2].setRGB(0, 0, 0);
      leds[led3].setRGB(0, 0, 0);
    }
    else
    {
      red = (255 * neo_brightness) / 16;
      leds[led0].setRGB(red, 0, 0);
      leds[led1].setRGB(red, 0, 0);
      leds[led2].setRGB(red, 0, 0);
      leds[led3].setRGB(red, 0, 0);
    }

  }
  else if ( val < 0 )
  {
    if (enable_warning > 0 && !gaugeBlink)
    {
      leds[led0].setRGB(0, 0, 0);
      leds[led1].setRGB(0, 0, 0);
      leds[led2].setRGB(0, 0, 0);
      leds[led3].setRGB(0, 0, 0);
    }
    else
    {
      blue = (255 * neo_brightness) / 16;
      leds[led0].setRGB(0, 0, blue);
      leds[led1].setRGB(0, 0, blue);
      leds[led2].setRGB(0, 0, blue);
      leds[led3].setRGB(0, 0, blue);
    }
  }
  else
  {
    red   = pgm_read_byte (&ledarray[(val)].r0);
    green = pgm_read_byte (&ledarray[(val)].g0);
    blue  = pgm_read_byte (&ledarray[(val)].b0);
    red = (red * neo_brightness) / 16;
    green = (green * neo_brightness) / 16;
    blue = (blue * neo_brightness) / 16;
    leds[led0].setRGB(red, green, blue);

    red   = pgm_read_byte (&ledarray[(val)].r1);
    green = pgm_read_byte (&ledarray[(val)].g1);
    blue  = pgm_read_byte (&ledarray[(val)].b1);
    red = (red * neo_brightness) / 16;
    green = (green * neo_brightness) / 16;
    blue = (blue * neo_brightness) / 16;
    leds[led1].setRGB(red, green, blue);

    red   = pgm_read_byte (&ledarray[(val)].r2);
    green = pgm_read_byte (&ledarray[(val)].g2);
    blue  = pgm_read_byte (&ledarray[(val)].b2);
    red = (red * neo_brightness) / 16;
    green = (green * neo_brightness) / 16;
    blue = (blue * neo_brightness) / 16;
    leds[led2].setRGB(red, green, blue);

    red   = pgm_read_byte (&ledarray[(val)].r3);
    green = pgm_read_byte (&ledarray[(val)].g3);
    blue  = pgm_read_byte (&ledarray[(val)].b3);
    red = (red * neo_brightness) / 16;
    green = (green * neo_brightness) / 16;
    blue = (blue * neo_brightness) / 16;
    leds[led3].setRGB(red, green, blue);
  }
}

void write_neopixel()
{
  long temp;
  // unsigned int RPM, AFR, CLT, MAP, MAT, SPKADV, BATTV, TPS, Knock, Baro, EGOc, IAC, dwell, bstduty, idle_tar, AFRtgt;
  // void neogauge4led(int val, byte led0, byte led1, byte led2, byte led3)
  // void neogauge(int val, byte led)

  temp = (RPM * 1000) / REVLIMIT;
  neogauge4led(temp, 1, 0, 15, 14, 1); // RPM min 0 max REVLIMIT

  temp = ((AFR * 2) * 100) / 59;
  if (AFR <= 147)
  {
    temp = (pow((AFR - 147),3) / 150) + 500;
  }
  else if (AFR > 147)
  {
    temp = (pow((AFR - 147),3) / 20) + 500;
  }

  neogauge4led(temp, 9, 10, 11, 12, 0); // AFR

  temp=TPS;
  neogauge(temp, 2, 0); //TPS - min 0 max 1000

  temp=(CLT * 5) / 12; //CLT - min ? mid 120 max 240
  neogauge(temp, 4, 1);


  temp=(MAT * 5) / 7; //MAT - min ? mid 70 max 140
  neogauge(temp, 6, 0);

  temp=MAP/2;
  neogauge(temp, 8, 0); //MAP - min impossible mid 100kpa max 200kpa

  // will need to play with this some, 50 looks reasonable though
  temp=((AFR - AFRtgt) * 50) + 500;
  neogauge(temp, 13, 0);

  leds[3].setRGB(0, 0, 0); // unallocated
  leds[5].setRGB(0, 0, 0);
  leds[7].setRGB(0, 0, 0);

  FastLED.show();

//todo: oil temp, oil pressure, EGT
//todo: rearrange LED's into something nicer
//todo: might be faster to do a final FastLED.show here instead of inside the neogauge functions
}